Hello - from /Users/eugenemishura/.vscode/extensions/jaredly.reason-vscode-1.7.8/bin.native
Previous log location: /var/folders/g2/mprq97vj0nnclbl_9nd4997h0000gn/T/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":false}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","languageId":"ocaml","version":1,"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\ntype transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n}\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_hook_params * permissions_descriptor)\n    : operation list =\n  let sender_ops = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":104,"character":33},"end":{"line":104,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 2, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 3, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 4, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 5, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":104,"character":33},"end":{"line":104,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00381469726562ms
Sending response {"id": 6, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":104,"character":33},"end":{"line":104,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 7, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":104,"character":33},"end":{"line":104,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 8, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_transfer_hook_lib.mligo","languageId":"ocaml","version":1,"text":"(**\n Helper types and functions to implement transfer hook contract.\n Each transfer hook contract maintains a registry of known FA2 contracts and\n validates that it is invoked from registered FA2 contracts.\n \n The implementation assumes that the transfer hook entry point is labeled as\n `%tokens_transferred_hook`.\n *)\n \n#if !FA2_HOOK_LIB\n#define FA2_HOOK_LIB\n\n#include \"../fa2_hook.mligo\"\n#include \"fa2_convertors.mligo\"\n\nlet get_hook_entrypoint (hook_contract : address) (u : unit) \n    : transfer_descriptor_param_michelson contract =\n  let hook_entry : transfer_descriptor_param_michelson contract = \n    Operation.get_entrypoint \"%tokens_transferred_hook\" hook_contract in\n  hook_entry\n\n\nlet create_register_hook_op \n    (fa2, descriptor : (fa2_with_hook_entry_points contract) * permissions_descriptor) : operation =\n  let hook_fn = get_hook_entrypoint Current.self_address in\n  let p : set_hook_param_aux = {\n    hook = hook_fn;\n    permissions_descriptor = permissions_descriptor_to_michelson descriptor;\n  } in\n  let pm = Layout.convert_to_right_comb p in\n  Operation.transaction (Set_transfer_hook pm) 0mutez fa2\n\n\ntype fa2_registry = address set\n\nlet register_with_fa2 (fa2, descriptor, registry : \n    (fa2_with_hook_entry_points contract) * permissions_descriptor * fa2_registry) \n    : operation * fa2_registry =\n  let op = create_register_hook_op (fa2, descriptor) in\n  let fa2_address = Current.address fa2 in\n  let new_registry = Set.add fa2_address registry in\n  op, new_registry\n\nlet validate_hook_call (fa2, registry: address * fa2_registry) : unit =\n  if Set.mem fa2 registry\n  then unit\n  else failwith \"UNKNOWN_FA2_CALL\"\n\n#endif\n"}}}
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_transfer_hook_lib.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00381469726562ms
Sending response {"id": 9, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_transfer_hook_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 10, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_transfer_hook_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 11, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":12,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_transfer_hook_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 12, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_transfer_hook_lib.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 13, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","languageId":"ocaml","version":1,"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}}}
Read message 
{"jsonrpc":"2.0","id":14,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00381469726562ms
Sending response {"id": 14, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":15,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 15, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":16,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00381469726562ms
Sending response {"id": 16, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":17,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00381469726562ms
Sending response {"id": 17, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":18,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":23,"character":44},"end":{"line":23,"character":44}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 18, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":19,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":22,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 19, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":20,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":23,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 20, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":21,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":23,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 21, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":22,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":23,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 22, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":23,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":23,"character":12},"end":{"line":23,"character":30}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 23, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":24,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":23,"character":21}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 24, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":25,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":23,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 25, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":26,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":23,"character":12},"end":{"line":23,"character":30}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 26, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":27,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Sending response {"id": 27, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":28,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 28, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":29,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 29, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":30,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":23,"character":12},"end":{"line":23,"character":30}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0228881835938ms
Sending response {"id": 30, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":2},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, which behavior is driven\nby a particular settings of `permission_policy`.\n*)\n\n#include \"../lib/fa2_hook_lib.mligo\"\n#include \"../lib/fa2_behaviors.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (p.fa2, s.fa2_registry) in\n    let ops = standard_transfer_hook (\n      {ligo_param = p; michelson_param = pm}, s.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":31,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 31, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":32,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 32, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":3},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":33,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 33, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":34,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 34, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":35,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 35, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":36,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 36, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":37,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 37, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":38,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":13,"character":43}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 38, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":39,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":23,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.0219345092773ms
Sending response {"id": 39, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":40,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":22,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 40, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":41,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":22,"character":25}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 41, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":42,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":22,"character":15},"end":{"line":22,"character":40}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 42, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":43,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":22,"character":26}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Sending response {"id": 43, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":44,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":22,"character":27}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Sending response {"id": 44, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":45,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":22,"character":40}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 45, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":46,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":22,"character":15},"end":{"line":22,"character":40}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 46, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":47,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":23,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 47, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":48,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":24,"character":1},"end":{"line":24,"character":1}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 48, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":49,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":21,"character":1},"end":{"line":24,"character":1}},"context":{"diagnostics":[{"range":{"start":{"line":22,"character":2},"end":{"line":22,"character":6}},"message":"\"ligo\": Unknown word.","severity":3,"source":"cSpell"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 49, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":50,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":21,"character":0},"end":{"line":24,"character":1}},"context":{"diagnostics":[{"range":{"start":{"line":22,"character":2},"end":{"line":22,"character":6}},"message":"\"ligo\": Unknown word.","severity":3,"source":"cSpell"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 50, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":2},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_hook_params * permissions_descriptor)\n    : operation list =\n  let sender_ops = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":51,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 51, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":52,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":21,"character":3},"end":{"line":24,"character":1}},"context":{"diagnostics":[{"range":{"start":{"line":22,"character":2},"end":{"line":22,"character":6}},"message":"\"ligo\": Unknown word.","severity":3,"source":"cSpell"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 52, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":53,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 53, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":54,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":124,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 54, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":55,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":123,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 55, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":56,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":123,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 56, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":57,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":123,"character":6},"end":{"line":123,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 57, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":58,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":124,"character":53}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 58, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":59,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":122,"character":52}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 59, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":60,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":122,"character":52}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 60, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":61,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":122,"character":42},"end":{"line":122,"character":62}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 61, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":3},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_ops = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":62,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 62, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":63,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":122,"character":67},"end":{"line":122,"character":67}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 63, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":64,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 64, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":65,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":122,"character":52}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 65, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":66,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":124,"character":27}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 66, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":67,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":124,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Sending response {"id": 67, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":68,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":124,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 68, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":69,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":124,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 69, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":70,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":124,"character":16},"end":{"line":124,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 70, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":4},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":71,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 71, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":72,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":124,"character":15},"end":{"line":124,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 72, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":73,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 73, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":5},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\n\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":74,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 74, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":75,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 75, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":6},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\nt\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":76,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":1},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 76, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":7},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\nty\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":9},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":10},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype \ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":77,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 77, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":78,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 78, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":11},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype h\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":79,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":6},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 79, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":80,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 80, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":14},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":81,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 81, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":82,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":15,"character":9},"end":{"line":15,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 82, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":83,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 83, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":15},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":84,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 84, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":85,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 85, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":86,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":15,"character":10},"end":{"line":15,"character":10}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 86, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":17},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_ca\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":87,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 87, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":19},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_call\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":88,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":14},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Sending response {"id": 88, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":89,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 89, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":20},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_callb\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":90,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":15},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 90, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":21},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_callba\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":91,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":16},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00286102294922ms
Sending response {"id": 91, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":92,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 92, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":23},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_callbacv\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":93,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":18},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 93, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":24},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_callbacvk\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":94,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":19},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 94, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":95,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 95, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":96,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":15,"character":19},"end":{"line":15,"character":19}},"context":{"diagnostics":[{"range":{"start":{"line":15,"character":10},"end":{"line":15,"character":19}},"message":"\"callbacvk\": Unknown word.","severity":3,"source":"cSpell"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 96, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":97,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 97, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":26},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_callbac\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":98,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 98, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":99,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":15,"character":17},"end":{"line":15,"character":17}},"context":{"diagnostics":[{"range":{"start":{"line":15,"character":10},"end":{"line":15,"character":17}},"message":"\"callbac\": Unknown word.","severity":3,"source":"cSpell"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 99, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":100,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 100, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":27},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_callback\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":101,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":18},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 101, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":28},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_callback \ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":102,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 102, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":103,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 103, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":29},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_callback =\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":104,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 104, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":105,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":15,"character":20},"end":{"line":15,"character":20}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 105, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":106,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 106, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":107,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":17,"character":65}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 107, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":108,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":16,"character":18},"end":{"line":17,"character":65}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 108, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":109,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":17,"character":21},"end":{"line":17,"character":65}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 109, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":110,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":15,"character":20},"end":{"line":15,"character":20}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 110, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":30},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_callback = \ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":111,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 111, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":112,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 112, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":31},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_callback = transfer_descriptor_param_michelson contract\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":113,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 113, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":114,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":15,"character":65},"end":{"line":15,"character":65}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 114, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":115,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 115, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":32},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_callback = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":116,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 116, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":117,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 117, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":118,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 118, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":119,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 119, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":120,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.00882148742676ms
Sending response {"id": 120, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":121,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 121, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":122,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Sending response {"id": 122, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":123,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 123, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":124,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Sending response {"id": 124, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":125,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 125, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":126,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 126, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":127,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.0181198120117ms
Sending response {"id": 127, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":128,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 128, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":129,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":15,"character":5},"end":{"line":15,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 129, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":130,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 130, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":131,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":15,"character":18},"end":{"line":15,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 131, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":132,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":19,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 132, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":38},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_ca = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":133,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 133, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":39},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_c = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":134,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 134, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":135,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":15,"character":11},"end":{"line":15,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 135, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":136,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 136, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":40},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_co = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":137,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":12},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 137, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":138,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 138, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":41},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_con = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":44},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_contra = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":139,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 139, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":46},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_contract = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_contract of transfer_descriptor_param_michelson contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":140,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 140, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":141,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":15,"character":18},"end":{"line":15,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 141, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":142,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 142, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":143,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":18,"character":64}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 143, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":144,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":18,"character":57}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 144, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":145,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":18,"character":57}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 145, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":146,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":18,"character":57},"end":{"line":18,"character":57}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 146, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":147,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":17,"character":18},"end":{"line":18,"character":57}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 147, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":148,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":18,"character":21},"end":{"line":18,"character":57}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 148, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":149,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":18,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 149, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":47},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_contract = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_contract of hcontract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":150,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 150, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":50},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_contract = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_contract of hookcontract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":151,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 151, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":152,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":18,"character":25},"end":{"line":18,"character":25}},"context":{"diagnostics":[{"range":{"start":{"line":18,"character":21},"end":{"line":18,"character":33}},"message":"\"hookcontract\": Unknown word.","severity":3,"source":"cSpell"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 152, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":153,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 153, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":51},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_contract = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_contract of hook_contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":154,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 154, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":155,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":18,"character":26},"end":{"line":18,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 155, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":156,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 156, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":157,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 157, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":158,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 158, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":159,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":15,"character":18},"end":{"line":15,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 159, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":160,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":21,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 160, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":59},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_ = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_contract of hook_contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":161,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 161, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":162,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":15,"character":10},"end":{"line":15,"character":10}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 162, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":163,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 163, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":60},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_e = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_contract of hook_contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":164,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":11},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 164, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":63},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entr = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_contract of hook_contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":165,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":14},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 165, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":64},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_contract of hook_contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":166,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":15},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00286102294922ms
Sending response {"id": 166, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":167,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 167, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":168,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":15,"character":15},"end":{"line":15,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 168, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":169,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 169, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":65},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_ = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_contract of hook_contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":170,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":16},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Sending response {"id": 170, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":66},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_p = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_contract of hook_contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":171,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":17},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 171, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":67},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_po = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_contract of hook_contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":172,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":18},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 172, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":68},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_poi = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_contract of hook_contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":173,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":19},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Sending response {"id": 173, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":174,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 174, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":69},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_poin = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_contract of hook_contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":175,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":20},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Sending response {"id": 175, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":70},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_contract of hook_contract\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":176,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":21},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0121593475342ms
Sending response {"id": 176, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":177,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 177, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":178,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":15,"character":21},"end":{"line":15,"character":21}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 178, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":179,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 179, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":180,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":18,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 180, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":181,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":18,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 181, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":182,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":18,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 182, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":183,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 183, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":184,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 184, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":185,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 185, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":186,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":15,"character":5},"end":{"line":15,"character":21}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 186, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":187,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":18,"character":26}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 187, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":188,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":18,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 188, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":189,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":18,"character":21},"end":{"line":18,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 189, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":71},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_contract of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":190,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 190, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":191,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":18,"character":37},"end":{"line":18,"character":37}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 191, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":192,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 192, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":193,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":18,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 193, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":194,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":18,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 194, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":195,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":18,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 195, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":196,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":18,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 196, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":197,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":18,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 197, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":196}}
Read message 
{"jsonrpc":"2.0","id":198,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":18,"character":17},"end":{"line":18,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 198, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":199,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":21,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 199, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":78},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_c of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":200,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 200, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":201,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":10}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 201, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":202,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 202, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":79},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_ of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":203,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00619888305664ms
Sending response {"id": 203, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":204,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":18,"character":9},"end":{"line":18,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 204, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":205,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 205, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":80},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_e of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":206,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":18,"character":10},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Sending response {"id": 206, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":84},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":207,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 207, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":208,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":18,"character":14},"end":{"line":18,"character":14}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 208, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":209,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 209, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":85},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_ of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":210,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 210, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":211,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":18,"character":15},"end":{"line":18,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 211, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":212,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0121593475342ms
Sending response {"id": 212, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":88},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_poi of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":90},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_op = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":213,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 213, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":214,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":18,"character":20},"end":{"line":18,"character":20}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 214, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":215,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0121593475342ms
Sending response {"id": 215, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":216,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":129,"character":32}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 216, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":217,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":126,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 217, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":218,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":126,"character":15}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 218, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":219,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":126,"character":15},"end":{"line":126,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 219, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":91},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_o = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":92},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_ = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":220,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 220, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":221,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":126,"character":13},"end":{"line":126,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 221, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":222,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 222, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":93},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_e = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":223,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":126,"character":14},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 223, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":96},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_entr = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":224,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":126,"character":17},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 224, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":97},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_entry = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":225,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":126,"character":18},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 225, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":226,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 226, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":227,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":126,"character":18},"end":{"line":126,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 227, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":228,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 228, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":98},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_entr = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":229,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 229, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":230,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":126,"character":17},"end":{"line":126,"character":17}},"context":{"diagnostics":[{"range":{"start":{"line":126,"character":13},"end":{"line":126,"character":17}},"message":"\"entr\": Unknown word.","severity":3,"source":"cSpell"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 230, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":231,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 231, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":99},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_entri = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":232,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":126,"character":18},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 232, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":100},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_entrie = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":233,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":126,"character":19},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00619888305664ms
Sending response {"id": 233, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":101},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_ops = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":234,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":126,"character":20},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 234, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":235,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 235, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":236,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":126,"character":20},"end":{"line":126,"character":20}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 236, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":237,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00882148742676ms
Sending response {"id": 237, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":238,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":128,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Sending response {"id": 238, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":239,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":127,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 239, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":240,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":127,"character":19},"end":{"line":127,"character":19}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 240, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":241,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":127,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 241, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":242,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":127,"character":18},"end":{"line":127,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 242, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":104},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_ = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":243,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 243, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":244,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":127,"character":15},"end":{"line":127,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 244, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":245,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 245, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":105},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_e = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":246,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":127,"character":16},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Sending response {"id": 246, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":108},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entr = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":247,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":127,"character":19},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 247, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":109},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entri = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":248,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":127,"character":20},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 248, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":110},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entrie = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":249,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":127,"character":21},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 249, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":111},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (operation list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":250,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":127,"character":22},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Sending response {"id": 250, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":251,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 251, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":252,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":127,"character":22},"end":{"line":127,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 252, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":253,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 253, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":254,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":129,"character":32}}}
[server] Got a method textDocument/hover
[server] processing took 0.00882148742676ms
Sending response {"id": 254, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":255,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":129,"character":30}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 255, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":256,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":129,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 256, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":257,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":129,"character":26},"end":{"line":129,"character":35}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 257, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":112},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (h list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":258,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":129,"character":27},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 258, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":259,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 259, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":114},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hoo list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":115},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":260,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 260, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":261,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 261, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":262,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":129,"character":30},"end":{"line":129,"character":30}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 262, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":116},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_ list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":263,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 263, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":264,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":129,"character":31},"end":{"line":129,"character":31}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 264, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":265,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 265, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":118},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_en list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":119},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_ent list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":121},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":266,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0190734863281ms
Sending response {"id": 266, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":267,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":129,"character":36},"end":{"line":129,"character":36}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 267, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":268,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 268, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":125},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_poi list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":127},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : operation list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":269,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 269, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":270,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 270, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":271,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":129,"character":42},"end":{"line":129,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 271, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":272,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":129,"character":47}}}
[server] Got a method textDocument/hover
[server] processing took 0.00882148742676ms
Sending response {"id": 272, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":273,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":129,"character":47}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 273, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":274,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":129,"character":47},"end":{"line":129,"character":47}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 274, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":275,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":129,"character":47}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 275, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":276,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":129,"character":27},"end":{"line":129,"character":47}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 276, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":277,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":129,"character":26},"end":{"line":129,"character":47}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 277, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":278,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":129,"character":26}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Sending response {"id": 278, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":279,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":129,"character":26}}}
[server] Got a method textDocument/definition
[server] processing took 0.00500679016113ms
Sending response {"id": 279, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":280,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":125,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 280, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":281,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":125,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 281, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":282,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":125,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 282, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":283,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":125,"character":11},"end":{"line":125,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0197887420654ms
Sending response {"id": 283, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":284,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":125,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 284, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":285,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":125,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 285, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":286,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":125,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 286, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":287,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":125,"character":7},"end":{"line":125,"character":20}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00619888305664ms
Sending response {"id": 287, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":288,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":125,"character":6},"end":{"line":125,"character":20}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 288, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":289,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":125,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 289, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":290,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":125,"character":6}}}
[server] Got a method textDocument/definition
[server] processing took 0.00500679016113ms
Sending response {"id": 290, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":128},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":291,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00619888305664ms
Sending response {"id": 291, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":292,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":125,"character":27},"end":{"line":125,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 292, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":293,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 293, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":294,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0109672546387ms
Sending response {"id": 294, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":128},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":128}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":295,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":125,"character":27},"end":{"line":125,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 295, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":296,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":113,"character":21}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 296, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":297,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":114,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 297, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":298,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":114,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 298, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":299,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":114,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Sending response {"id": 299, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":300,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":114,"character":20},"end":{"line":114,"character":20}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 300, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":301,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":114,"character":14},"end":{"line":114,"character":20}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 301, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":302,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":114,"character":5},"end":{"line":114,"character":20}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 302, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":303,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":114,"character":6},"end":{"line":114,"character":20}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 303, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":304,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":114,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 304, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":305,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":114,"character":6}}}
[server] Got a method textDocument/definition
[server] processing took 0.0100135803223ms
Sending response {"id": 305, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":129},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":306,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 306, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":307,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":114,"character":27},"end":{"line":114,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0181198120117ms
Sending response {"id": 307, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":308,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 308, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":309,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":105,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Sending response {"id": 309, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":310,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":105,"character":22}}}
[server] Got a method textDocument/hover
[server] processing took 0.0340938568115ms
Sending response {"id": 310, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":311,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":105,"character":22}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 311, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":312,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":105,"character":23}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 312, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":313,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":105,"character":23}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 313, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":314,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":105,"character":22}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 314, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":315,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":105,"character":22}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Sending response {"id": 315, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":316,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":105,"character":23}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 316, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":317,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":105,"character":22}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 317, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":318,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":105,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 318, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":319,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":105,"character":21}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 319, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":320,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":105,"character":21}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 320, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":321,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":105,"character":21},"end":{"line":105,"character":21}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Sending response {"id": 321, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":322,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":105,"character":21},"end":{"line":105,"character":29}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 322, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":323,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":105,"character":29}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 323, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":130},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_e c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":324,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":105,"character":22},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Sending response {"id": 324, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":325,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0190734863281ms
Sending response {"id": 325, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":134},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":326,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 326, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":327,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":105,"character":26},"end":{"line":105,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 327, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":328,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0119209289551ms
Sending response {"id": 328, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":135},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry+ c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":329,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0190734863281ms
Sending response {"id": 329, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":330,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":105,"character":27},"end":{"line":105,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 330, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":331,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0119209289551ms
Sending response {"id": 331, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":136},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":332,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 332, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":333,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":105,"character":26},"end":{"line":105,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 333, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":334,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 334, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":137},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_ c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":335,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":105,"character":27},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Sending response {"id": 335, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":139},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_po c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":140},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_poi c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":142},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":336,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 336, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":337,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":105,"character":32},"end":{"line":105,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 337, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":338,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 338, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":339,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":103,"character":32}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 339, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":340,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":102,"character":29}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 340, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":341,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":102,"character":29}}}
[server] Got a method textDocument/hover
[server] processing took 0.00619888305664ms
Sending response {"id": 341, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":342,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":102,"character":28}}}
[server] Got a method textDocument/hover
[server] processing took 0.00882148742676ms
Sending response {"id": 342, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":343,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":106,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 343, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":344,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":105,"character":28}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 344, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":345,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":102,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.00882148742676ms
Sending response {"id": 345, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":346,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":102,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 346, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":347,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":102,"character":25}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00619888305664ms
Sending response {"id": 347, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":348,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":102,"character":13},"end":{"line":102,"character":48}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 348, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":349,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":102,"character":56}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 349, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":350,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":102,"character":57}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 350, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":351,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":102,"character":57}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 351, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":352,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":102,"character":58},"end":{"line":102,"character":58}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 352, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":353,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":102,"character":13},"end":{"line":102,"character":58}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 353, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":354,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":102,"character":12},"end":{"line":102,"character":58}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 354, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":355,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":102,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.0197887420654ms
Sending response {"id": 355, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":143},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : h option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":356,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":102,"character":13},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Sending response {"id": 356, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":357,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 357, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":146},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":358,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00977516174316ms
Sending response {"id": 358, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":359,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":102,"character":16},"end":{"line":102,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Sending response {"id": 359, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":360,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00882148742676ms
Sending response {"id": 360, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":147},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_ option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":361,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.018835067749ms
Sending response {"id": 361, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":362,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":102,"character":17},"end":{"line":102,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 362, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":362}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":152},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":363,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.02121925354ms
Sending response {"id": 363, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":364,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":102,"character":22},"end":{"line":102,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 364, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":365,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0190734863281ms
Sending response {"id": 365, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":153},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_ option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":156},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_poi option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":158},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : operation list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":366,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 366, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":367,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":102,"character":28},"end":{"line":102,"character":28}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 367, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":368,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 368, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":369,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":105,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00619888305664ms
Sending response {"id": 369, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":370,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":105,"character":19},"end":{"line":105,"character":19}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 370, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":371,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":93,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 371, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":372,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":103,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 372, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":373,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":103,"character":18},"end":{"line":103,"character":28}},"context":{"diagnostics":[{"range":{"start":{"line":103,"character":18},"end":{"line":103,"character":28}},"message":"\"entrypoint\": Unknown word.","severity":3,"source":"cSpell"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Sending response {"id": 373, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":374,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":102,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 374, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":375,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":102,"character":12},"end":{"line":102,"character":28}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 375, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":376,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":92,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 376, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":377,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":92,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 377, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":378,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":92,"character":6},"end":{"line":92,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 378, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":159},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":379,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.018835067749ms
Sending response {"id": 379, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":380,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":92,"character":22},"end":{"line":92,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 380, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":381,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 381, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":382,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":92,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 382, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":383,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":113,"character":33}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 383, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":384,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":108,"character":3},"end":{"line":108,"character":3}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 384, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":385,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":109,"character":73}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 385, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":386,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":109,"character":74}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 386, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":387,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":18,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Sending response {"id": 387, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":160},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":388,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 388, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":389,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 389, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":161},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\n()\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":390,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":17,"character":1}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00786781311035ms
Sending response {"id": 390, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":391,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 391, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":162},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\n(*)\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":392,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 392, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":393,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":17,"character":2},"end":{"line":17,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 393, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":394,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0109672546387ms
Sending response {"id": 394, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":163},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\n(* )\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":395,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 395, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":396,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":17,"character":3},"end":{"line":17,"character":3}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 396, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":397,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0190734863281ms
Sending response {"id": 397, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":164},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\n(* *)\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":398,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 398, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":399,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":17,"character":4},"end":{"line":17,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 399, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":400,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 400, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":401,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":17,"character":3},"end":{"line":17,"character":3}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 401, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":167},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\n(* fin*)\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":169},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\n(* findi*)\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":172},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\n(* finding *)\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":402,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 402, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":174},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\n(* finding re*)\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":176},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\n(* finding resu*)\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":178},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\n(* finding result*)\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":403,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 403, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":404,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":17,"character":17},"end":{"line":17,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 404, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":405,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 405, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":406,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":17,"character":19},"end":{"line":17,"character":19}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 406, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":407,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":17,"character":0},"end":{"line":17,"character":19}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 407, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":179},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":408,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 408, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":409,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 409, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":180},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":410,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 410, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":411,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 411, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":412,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":35,"character":35}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 412, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":413,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":25,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 413, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":414,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":23,"character":0},"end":{"line":27,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":24,"character":2},"end":{"line":24,"character":6}},"message":"\"ligo\": Unknown word.","severity":3,"source":"cSpell"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 414, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":181},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":415,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 415, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":416,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 416, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":182},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : (transfer_descriptor_param_michelson contract) option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":417,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00977516174316ms
Sending response {"id": 417, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":418,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":23,"character":0},"end":{"line":27,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":24,"character":2},"end":{"line":24,"character":6}},"message":"\"ligo\": Unknown word.","severity":3,"source":"cSpell"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 418, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":419,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0138282775879ms
Sending response {"id": 419, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":420,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":25,"character":22},"end":{"line":25,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0190734863281ms
Sending response {"id": 420, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":421,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":24,"character":27}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 421, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":422,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":24,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 422, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":423,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":24,"character":15},"end":{"line":24,"character":40}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0181198120117ms
Sending response {"id": 423, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":424,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":35,"character":36}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 424, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":425,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":92,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 425, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":426,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":98,"character":25}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 426, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":427,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":98,"character":29}}}
[server] Got a method textDocument/hover
[server] processing took 0.0178813934326ms
Sending response {"id": 427, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":428,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":98,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 428, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":429,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":81,"character":55}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 429, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":430,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":80,"character":58}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 430, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":431,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":80,"character":58}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 431, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":432,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":80,"character":58},"end":{"line":80,"character":58}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0309944152832ms
Sending response {"id": 432, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":433,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":80,"character":17},"end":{"line":80,"character":58}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 433, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":434,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":80,"character":12},"end":{"line":80,"character":58}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0190734863281ms
Sending response {"id": 434, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":435,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":80,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.018835067749ms
Sending response {"id": 435, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":436,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":79,"character":12}}}
[server] Got a method textDocument/definition
[server] processing took 0.0269412994385ms
Sending response {"id": 436, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":437,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":79,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 437, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":183},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : transfer_descriptor_param option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contract c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":438,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 438, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":439,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":80,"character":37},"end":{"line":80,"character":37}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 439, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":440,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 440, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":441,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":83,"character":28}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 441, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":442,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":83,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 442, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":443,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":83,"character":29},"end":{"line":83,"character":29}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 443, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":444,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":92,"character":26}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 444, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":184},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : transfer_descriptor_param option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contrac c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":186},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : transfer_descriptor_param option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_contr c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":445,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 445, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":446,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":83,"character":26},"end":{"line":83,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 446, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":447,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 447, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":187},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : transfer_descriptor_param option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_cont c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":190},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : transfer_descriptor_param option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_c c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":448,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 448, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":191},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : transfer_descriptor_param option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_ c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":449,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 449, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":450,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":83,"character":21},"end":{"line":83,"character":21}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 450, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":451,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 451, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":192},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : transfer_descriptor_param option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_e c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":452,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":83,"character":22},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 452, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":196},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : transfer_descriptor_param option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":453,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 453, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":454,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":83,"character":26},"end":{"line":83,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 454, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":455,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 455, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":199},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : transfer_descriptor_param option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_po c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":200},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : transfer_descriptor_param option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_poi c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":456,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 456, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":202},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : transfer_descriptor_param option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":457,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 457, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":458,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":83,"character":32},"end":{"line":83,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 458, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":459,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 459, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":460,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00786781311035ms
Sending response {"id": 460, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":202},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : transfer_descriptor_param option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":202}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":461,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":83,"character":32},"end":{"line":83,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 461, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":462,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":86,"character":3},"end":{"line":86,"character":3}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 462, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":463,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":80,"character":23}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 463, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":464,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":72,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 464, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":465,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":70,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 465, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":466,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":69,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 466, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":467,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":69,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.0221729278564ms
Sending response {"id": 467, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":468,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":81,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 468, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":469,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":81,"character":18},"end":{"line":81,"character":28}},"context":{"diagnostics":[{"range":{"start":{"line":81,"character":18},"end":{"line":81,"character":28}},"message":"\"entrypoint\": Unknown word.","severity":3,"source":"cSpell"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 469, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":470,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":80,"character":27}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 470, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":471,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":80,"character":27}}}
[server] Got a method textDocument/hover
[server] processing took 0.0219345092773ms
Sending response {"id": 471, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":472,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":81,"character":46}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 472, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":473,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":81,"character":45}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 473, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":474,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":83,"character":32}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 474, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":475,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":92,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Sending response {"id": 475, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":476,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":92,"character":15}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 476, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":477,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":92,"character":6},"end":{"line":92,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 477, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":478,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":80,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 478, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":479,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":80,"character":12},"end":{"line":80,"character":37}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 479, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":203},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":480,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 480, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":481,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":80,"character":28},"end":{"line":80,"character":28}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0200271606445ms
Sending response {"id": 481, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":482,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0109672546387ms
Sending response {"id": 482, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":483,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0109672546387ms
Sending response {"id": 483, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":203},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":203}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":484,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":80,"character":28},"end":{"line":80,"character":28}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 484, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":485,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":69,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Sending response {"id": 485, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":486,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":69,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 486, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":487,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":69,"character":6},"end":{"line":69,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 487, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":488,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":69,"character":10},"end":{"line":69,"character":10}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 488, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":204},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operhook_entry_pointation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":489,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 489, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":490,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":69,"character":26},"end":{"line":69,"character":26}},"context":{"diagnostics":[{"range":{"start":{"line":69,"character":21},"end":{"line":69,"character":31}},"message":"\"pointation\": Unknown word.","severity":3,"source":"cSpell"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 490, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":491,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 491, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":205},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : operation list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":492,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 492, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":493,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":69,"character":10},"end":{"line":69,"character":10}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 493, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":494,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 494, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":495,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":69,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 495, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":496,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":69,"character":6},"end":{"line":69,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0350475311279ms
Sending response {"id": 496, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":206},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : operation list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":497,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 497, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":498,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":69,"character":22},"end":{"line":69,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 498, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":499,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 499, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":500,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":71,"character":33}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Sending response {"id": 500, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":501,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":71,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 501, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":502,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":71,"character":27},"end":{"line":71,"character":36}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 502, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":207},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":503,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 503, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":504,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":71,"character":43},"end":{"line":71,"character":43}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 504, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":505,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 505, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":506,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":73,"character":27}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 506, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":507,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":76,"character":31}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 507, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":508,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":76,"character":32}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 508, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":509,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":76,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 509, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":510,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":76,"character":35}}}
[server] Got a method textDocument/definition
[server] processing took 0.0109672546387ms
Sending response {"id": 510, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":511,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0100135803223ms
Sending response {"id": 511, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":207},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : operation list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":207}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":512,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":71,"character":43},"end":{"line":71,"character":43}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 512, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":513,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":51,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 513, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":514,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":51,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 514, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":515,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":51,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 515, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":516,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":51,"character":6},"end":{"line":51,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 516, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":208},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":517,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 517, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":518,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":51,"character":22},"end":{"line":51,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 518, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":519,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 519, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":520,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0109672546387ms
Sending response {"id": 520, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":208},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":208}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":521,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":51,"character":22},"end":{"line":51,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 521, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":522,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":124,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Sending response {"id": 522, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":523,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":124,"character":42},"end":{"line":124,"character":67}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 523, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":524,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":113,"character":52}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 524, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":525,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":113,"character":52}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 525, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":526,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":113,"character":41},"end":{"line":113,"character":61}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 526, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":209},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_hook_params * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":527,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 527, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":528,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":113,"character":66},"end":{"line":113,"character":66}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.018835067749ms
Sending response {"id": 528, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":529,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 529, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":530,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":91,"character":53}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 530, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":531,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":91,"character":53}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 531, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":532,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":91,"character":45},"end":{"line":91,"character":65}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 532, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":210},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_hook_params * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":533,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 533, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":534,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":91,"character":70},"end":{"line":91,"character":70}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 534, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":535,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 535, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":536,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":50,"character":44}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 536, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":537,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":50,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 537, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":538,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":50,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 538, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":539,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":50,"character":4},"end":{"line":50,"character":24}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 539, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":211},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p.ligo_param.batch, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":540,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.018835067749ms
Sending response {"id": 540, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":541,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":50,"character":29},"end":{"line":50,"character":29}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 541, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":542,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 542, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":543,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":41}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 543, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":544,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":42}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 544, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":545,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":42},"end":{"line":52,"character":42}},"context":{"diagnostics":[{"range":{"start":{"line":52,"character":42},"end":{"line":52,"character":46}},"message":"\"ligo\": Unknown word.","severity":3,"source":"cSpell"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 545, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":546,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":42},"end":{"line":53,"character":13}},"context":{"diagnostics":[{"range":{"start":{"line":52,"character":42},"end":{"line":52,"character":46}},"message":"\"ligo\": Unknown word.","severity":3,"source":"cSpell"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 546, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":547,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":42},"end":{"line":52,"character":58}},"context":{"diagnostics":[{"range":{"start":{"line":52,"character":42},"end":{"line":52,"character":46}},"message":"\"ligo\": Unknown word.","severity":3,"source":"cSpell"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 547, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":548,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":58}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 548, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":212},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p., get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":549,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0200271606445ms
Sending response {"id": 549, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":550,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":42},"end":{"line":52,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 550, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":551,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 551, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":552,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0181198120117ms
Sending response {"id": 552, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":212},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p., get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":212}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":553,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":42},"end":{"line":52,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0147819519043ms
Sending response {"id": 553, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":213},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (ops, owner : (operation list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":554,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 554, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":555,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":41},"end":{"line":52,"character":41}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 555, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":556,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 556, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":557,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":54,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 557, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":558,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":54,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 558, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":559,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":54,"character":12},"end":{"line":54,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0340938568115ms
Sending response {"id": 559, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":560,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 560, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":561,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":51,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 561, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":562,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":51,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 562, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":563,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":51,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 563, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":564,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":51,"character":6},"end":{"line":51,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 564, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":565,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":54,"character":30}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 565, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":566,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":54,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 566, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":567,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":54,"character":26},"end":{"line":54,"character":35}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 567, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":214},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (ops, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":568,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 568, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":569,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":54,"character":42},"end":{"line":54,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 569, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":570,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 570, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":571,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":54,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 571, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":572,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":54,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 572, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":573,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":54,"character":12},"end":{"line":54,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 573, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":215},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (e, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":574,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 574, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":575,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":54,"character":13},"end":{"line":54,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 575, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":576,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 576, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":217},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : operation list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":577,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 577, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":578,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":54,"character":15},"end":{"line":54,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 578, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":579,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0121593475342ms
Sending response {"id": 579, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":580,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":65,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 580, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":581,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":65,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Sending response {"id": 581, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":582,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":65,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 582, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":583,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":65,"character":19},"end":{"line":65,"character":28}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 583, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":218},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_contract h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":584,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 584, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":585,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":65,"character":35},"end":{"line":65,"character":35}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 585, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":586,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0121593475342ms
Sending response {"id": 586, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":587,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":57,"character":22}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 587, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":588,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":56,"character":22}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 588, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":589,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":56,"character":22}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 589, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":590,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":56,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Sending response {"id": 590, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":591,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":56,"character":23},"end":{"line":56,"character":23}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 591, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":592,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":62,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 592, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":225},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_c h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":593,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 593, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":226},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_ h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":594,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 594, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":595,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":56,"character":15},"end":{"line":56,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 595, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":596,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 596, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":227},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_e h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":597,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":56,"character":16},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 597, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":598,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.018835067749ms
Sending response {"id": 598, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":231},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":599,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 599, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":600,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":56,"character":20},"end":{"line":56,"character":20}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 600, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":601,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 601, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":232},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_ h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":235},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_poi h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":237},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: ops\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":602,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 602, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":603,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":56,"character":26},"end":{"line":56,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 603, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":604,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 604, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":605,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":59,"character":21}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 605, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":606,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":59,"character":21},"end":{"line":59,"character":21}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 606, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":607,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":58,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 607, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":608,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":58,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 608, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":609,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":58,"character":18},"end":{"line":58,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0298023223877ms
Sending response {"id": 609, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":610,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":58,"character":17},"end":{"line":58,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 610, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":239},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h ->\n          let op = Operation.transaction p.michelson_param 0mutez h in\n          op :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":611,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 611, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":612,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":58,"character":17},"end":{"line":58,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 612, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":613,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 613, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":614,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":57,"character":70}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 614, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":615,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":57,"character":70},"end":{"line":58,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 615, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":616,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":57,"character":0},"end":{"line":57,"character":70}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 616, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":617,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":57,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 617, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":240},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h ->\n\n          op :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":618,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 618, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":619,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 619, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":620,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":58,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Sending response {"id": 620, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":621,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":58,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 621, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":622,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":58,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 622, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":623,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":58,"character":10},"end":{"line":58,"character":12}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 623, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":241},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h ->\n\n          h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":624,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":58,"character":11},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 624, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":625,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 625, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":626,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":58,"character":11},"end":{"line":58,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 626, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":627,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 627, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":628,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":58,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 628, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":629,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":58,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 629, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":630,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":58,"character":10},"end":{"line":58,"character":10}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 630, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":242},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h ->\n\n        h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":244},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h ->\n\n    h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":631,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 631, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":245},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h ->\n\n  h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":632,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0197887420654ms
Sending response {"id": 632, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":246},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h ->\n\nh :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":633,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.018835067749ms
Sending response {"id": 633, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":634,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":58,"character":0},"end":{"line":58,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 634, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":635,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 635, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":247},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h ->\nh :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":636,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.018835067749ms
Sending response {"id": 636, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":637,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":57,"character":0},"end":{"line":57,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 637, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":638,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 638, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":248},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h ->h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":639,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 639, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":640,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":56,"character":31},"end":{"line":56,"character":31}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 640, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":641,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 641, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":249},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ops (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":642,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 642, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":643,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":56,"character":32},"end":{"line":56,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 643, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":644,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 644, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":645,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":66,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Sending response {"id": 645, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":646,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":61,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 646, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":647,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":61,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 647, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":648,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":61,"character":15},"end":{"line":61,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.032901763916ms
Sending response {"id": 648, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":250},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else e (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":649,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":61,"character":16},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Sending response {"id": 649, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":650,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0190734863281ms
Sending response {"id": 650, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":651,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":61,"character":16},"end":{"line":61,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 651, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":652,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 652, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":251},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else ep (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":653,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 653, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":654,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":61,"character":17},"end":{"line":61,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 654, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":655,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 655, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":252},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":656,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.018835067749ms
Sending response {"id": 656, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":657,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":61,"character":18},"end":{"line":61,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 657, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":658,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 658, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":659,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":63,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 659, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":660,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0100135803223ms
Sending response {"id": 660, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":252},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : operation list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":252}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":661,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":63,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 661, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":662,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":63,"character":19},"end":{"line":63,"character":35}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 662, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":663,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":61,"character":43}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 663, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":664,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":60,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 664, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":665,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":60,"character":33},"end":{"line":60,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 665, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":253},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":666,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 666, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":667,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":60,"character":49},"end":{"line":60,"character":49}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0200271606445ms
Sending response {"id": 667, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":668,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 668, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":669,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0109672546387ms
Sending response {"id": 669, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":253},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":253}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":670,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":60,"character":49},"end":{"line":60,"character":49}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Sending response {"id": 670, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":671,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":60,"character":37}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 671, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":254},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":672,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 672, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":673,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 673, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":255},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nl"}]}}
Read message 
{"jsonrpc":"2.0","id":674,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":131,"character":1},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Sending response {"id": 674, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":257},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":259},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet t"}]}}
Read message 
{"jsonrpc":"2.0","id":675,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":131,"character":5},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 675, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":262},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test"}]}}
Read message 
{"jsonrpc":"2.0","id":676,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0190734863281ms
Sending response {"id": 676, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":677,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":131,"character":8},"end":{"line":131,"character":8}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 677, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":678,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 678, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":263},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test "}]}}
Read message 
{"jsonrpc":"2.0","id":679,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 679, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":680,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 680, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":264},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test ()"}]}}
Read message 
{"jsonrpc":"2.0","id":681,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":131,"character":10}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00882148742676ms
Sending response {"id": 681, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":682,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0190734863281ms
Sending response {"id": 682, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":265},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u)"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":266},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u )"}]}}
Read message 
{"jsonrpc":"2.0","id":683,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0190734863281ms
Sending response {"id": 683, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":684,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":131,"character":12},"end":{"line":131,"character":12}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 684, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":685,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0138282775879ms
Sending response {"id": 685, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":267},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u :)"}]}}
Read message 
{"jsonrpc":"2.0","id":686,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0197887420654ms
Sending response {"id": 686, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":687,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":131,"character":13},"end":{"line":131,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 687, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":688,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 688, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":268},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : )"}]}}
Read message 
{"jsonrpc":"2.0","id":689,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0209808349609ms
Sending response {"id": 689, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":269},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : u)"}]}}
Read message 
{"jsonrpc":"2.0","id":690,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":131,"character":15},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Sending response {"id": 690, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":273},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit )"}]}}
Read message 
{"jsonrpc":"2.0","id":691,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 691, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":692,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":131,"character":19},"end":{"line":131,"character":19}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Sending response {"id": 692, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":693,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 693, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":274},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit)"}]}}
Read message 
{"jsonrpc":"2.0","id":694,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0178813934326ms
Sending response {"id": 694, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":695,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":131,"character":18},"end":{"line":131,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 695, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":696,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 696, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":697,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":131,"character":19},"end":{"line":131,"character":19}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0381469726562ms
Sending response {"id": 697, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":275},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) "}]}}
Read message 
{"jsonrpc":"2.0","id":698,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 698, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":699,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 699, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":276},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) -"}]}}
Read message 
{"jsonrpc":"2.0","id":700,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 700, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":701,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":131,"character":21},"end":{"line":131,"character":21}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 701, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":702,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0197887420654ms
Sending response {"id": 702, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":277},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) "}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":278},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) ="}]}}
Read message 
{"jsonrpc":"2.0","id":703,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0190734863281ms
Sending response {"id": 703, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":279},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = "}]}}
Read message 
{"jsonrpc":"2.0","id":704,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 704, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":705,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 705, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":280},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = u"}]}}
Read message 
{"jsonrpc":"2.0","id":706,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":131,"character":23},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 706, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":283},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":707,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 707, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":708,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":131,"character":26},"end":{"line":131,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 708, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":709,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 709, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":710,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0100135803223ms
Sending response {"id": 710, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":283},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n    let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":283}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":711,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":131,"character":26},"end":{"line":131,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0200271606445ms
Sending response {"id": 711, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":712,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":124,"character":27}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 712, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":713,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":53,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.0219345092773ms
Sending response {"id": 713, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":714,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 714, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":715,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Sending response {"id": 715, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":716,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 716, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":717,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 717, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":718,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":4},"end":{"line":52,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 718, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":719,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":4},"end":{"line":64,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0112056732178ms
Sending response {"id": 719, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":284},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":720,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 720, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":721,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":2},"end":{"line":64,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0181198120117ms
Sending response {"id": 721, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":722,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 722, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":723,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0171661376953ms
Sending response {"id": 723, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":284},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":284}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":724,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":2},"end":{"line":64,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 724, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":725,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":55,"character":29}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 725, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":726,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":51,"character":23}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 726, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":727,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":23}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 727, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":728,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 728, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":729,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":15},"end":{"line":52,"character":36}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 729, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":730,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":33,"character":4},"end":{"line":33,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 730, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":731,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":50,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 731, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":732,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":49,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Sending response {"id": 732, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":733,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":50,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Sending response {"id": 733, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":734,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":50,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 734, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":735,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":50,"character":20},"end":{"line":50,"character":20}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 735, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":736,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":50,"character":4},"end":{"line":50,"character":29}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 736, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":737,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":51,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 737, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":738,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 738, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":739,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 739, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":740,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 740, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":741,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":21}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 741, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":742,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":21},"end":{"line":52,"character":21}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 742, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":743,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":15},"end":{"line":52,"character":36}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0379085540771ms
Sending response {"id": 743, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":744,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":59,"character":21}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 744, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":745,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":63,"character":39},"end":{"line":63,"character":39}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 745, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":746,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":56,"character":22},"end":{"line":63,"character":39}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 746, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":747,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":20},"end":{"line":63,"character":39}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 747, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":285},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  (* let owners = get_owners_from_batch (p, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list) *)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":748,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 748, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":749,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":23},"end":{"line":63,"character":39}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0231266021729ms
Sending response {"id": 749, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":750,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 750, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":751,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":63,"character":42},"end":{"line":63,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 751, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":752,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":63,"character":39}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 752, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":753,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":63,"character":39}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 753, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":754,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":63,"character":40},"end":{"line":63,"character":40}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 754, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":755,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":63,"character":11},"end":{"line":63,"character":40}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 755, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":756,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":63,"character":42},"end":{"line":63,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 756, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":286},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  (* let owners = get_owners_from_batch (p, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list) *)\n    \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":757,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0190734863281ms
Sending response {"id": 757, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":758,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0138282775879ms
Sending response {"id": 758, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":287},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  (* let owners = get_owners_from_batch (p, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list) *)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":759,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0200271606445ms
Sending response {"id": 759, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":760,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0190734863281ms
Sending response {"id": 760, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":761,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0100135803223ms
Sending response {"id": 761, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":287},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  (* let owners = get_owners_from_batch (p, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list) *)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":287}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":762,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":60,"character":46}}}
[server] Got a method textDocument/hover
[server] processing took 0.00977516174316ms
Sending response {"id": 762, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":763,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":46}}}
[server] Got a method textDocument/hover
[server] processing took 0.0221729278564ms
Sending response {"id": 763, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":764,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":44}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 764, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":765,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":41}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 765, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":766,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":51,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 766, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":767,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":53,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Sending response {"id": 767, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":768,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.0219345092773ms
Sending response {"id": 768, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":769,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":5}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 769, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":770,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":5},"end":{"line":52,"character":5}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 770, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":771,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":58,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 771, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":772,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":3},"end":{"line":52,"character":5}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 772, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":773,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":2},"end":{"line":52,"character":5}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 773, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":288},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list) *)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":774,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 774, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":775,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":2},"end":{"line":52,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0441074371338ms
Sending response {"id": 775, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":776,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 776, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":777,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":59,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 777, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":778,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":55,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.0300407409668ms
Sending response {"id": 778, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":779,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":54,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 779, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":780,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":54,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 780, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":781,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":55,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Sending response {"id": 781, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":782,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":54,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 782, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":783,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":53,"character":2}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 783, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":784,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":53,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 784, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":785,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":53,"character":2},"end":{"line":53,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 785, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":786,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":53,"character":2},"end":{"line":62,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 786, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":787,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":53,"character":2},"end":{"line":63,"character":38}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Sending response {"id": 787, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":788,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":63,"character":38}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 788, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":289},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p, get_owners) in\nSet.fold \n  (fun (eps, owner : (hook_entry_point list) * address) ->\n    match to_hook owner with\n    | Hook_entry_point h -> h :: eps\n    | Hook_undefined error ->\n      (* owner hook is not implemented by the target contract *)\n      if is_required\n      then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n      else eps (* owner hook is optional: skip it *)\n    )\n  owners ([] : hook_entry_point list) *)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":789,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 789, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":790,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":53,"character":0},"end":{"line":63,"character":36}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 790, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":791,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 791, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":290},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list) *)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":792,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 792, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":793,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":53,"character":0},"end":{"line":63,"character":38}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 793, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":794,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 794, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":291},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p, get_owners) in\n    Set.fold \n      (fun (eps, owner : (hook_entry_point list) * address) ->\n        match to_hook owner with\n        | Hook_entry_point h -> h :: eps\n        | Hook_undefined error ->\n          (* owner hook is not implemented by the target contract *)\n          if is_required\n          then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n          else eps (* owner hook is optional: skip it *)\n        )\n      owners ([] : hook_entry_point list) *)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":795,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 795, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":796,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":53,"character":0},"end":{"line":63,"character":40}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 796, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":797,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0138282775879ms
Sending response {"id": 797, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":292},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list) *)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":798,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0200271606445ms
Sending response {"id": 798, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":799,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":53,"character":0},"end":{"line":63,"character":38}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 799, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":800,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0190734863281ms
Sending response {"id": 800, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":801,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":61,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Sending response {"id": 801, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":802,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":53,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 802, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":803,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":53,"character":3},"end":{"line":53,"character":3}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 803, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":804,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":53,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 804, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":805,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":53,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 805, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":806,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":53,"character":2},"end":{"line":53,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 806, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":807,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":57,"character":2}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 807, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":293},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p, get_owners) in\n  (Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list) *)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":808,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":53,"character":3}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00810623168945ms
Sending response {"id": 808, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":809,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 809, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":294},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p, get_owners) in\n  (*Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list) *)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":810,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0190734863281ms
Sending response {"id": 810, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":811,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":53,"character":4},"end":{"line":53,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 811, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":812,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0219345092773ms
Sending response {"id": 812, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":813,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0109672546387ms
Sending response {"id": 813, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":294},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p, get_owners) in\n  (*Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list) *)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":294}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":814,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":53,"character":4},"end":{"line":53,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 814, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":815,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":64,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 815, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":816,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":56,"character":29}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Sending response {"id": 816, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":817,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":49,"character":45}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 817, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":818,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":54,"character":46}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Sending response {"id": 818, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":819,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":38}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 819, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":820,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 820, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":821,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":38},"end":{"line":52,"character":38}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 821, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":822,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":39},"end":{"line":52,"character":39}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 822, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":295},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p., get_owners) in\n  (*Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list) *)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":823,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":40},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 823, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":824,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 824, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":825,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0197887420654ms
Sending response {"id": 825, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":826,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":40},"end":{"line":52,"character":40}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 826, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":296},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.t, get_owners) in\n  (*Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list) *)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":827,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":41},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Sending response {"id": 827, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":297},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.tx, get_owners) in\n  (*Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list) *)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":298},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.txs, get_owners) in\n  (*Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list) *)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":828,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 828, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":829,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":43},"end":{"line":52,"character":43}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 829, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":830,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 830, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":831,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0200271606445ms
Sending response {"id": 831, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":298},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.txs, get_owners) in\n  (*Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list) *)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":298}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":832,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":43},"end":{"line":52,"character":43}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 832, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":833,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":37}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 833, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":834,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":50,"character":39}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 834, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":835,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":49,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 835, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":836,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":40}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 836, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":837,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":41}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Sending response {"id": 837, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":838,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":41}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 838, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":839,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":40},"end":{"line":52,"character":43}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 839, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":299},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.b, get_owners) in\n  (*Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list) *)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":840,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":52,"character":41},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 840, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":300},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.ba, get_owners) in\n  (*Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list) *)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":841,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0197887420654ms
Sending response {"id": 841, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":842,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":42},"end":{"line":52,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 842, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":301},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.bat, get_owners) in\n  (*Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list) *)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":303},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  (*Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list) *)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":843,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 843, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":844,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":45},"end":{"line":52,"character":45}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 844, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":845,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 845, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":846,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0109672546387ms
Sending response {"id": 846, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":303},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  (*Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list) *)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":303}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":847,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":52,"character":45},"end":{"line":52,"character":45}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 847, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":848,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":53,"character":9},"end":{"line":64,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 848, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":304},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  (* (*Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list) *)\n    ([] : hook_entry_point list)  *)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":849,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 849, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":850,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":53,"character":12},"end":{"line":64,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0379085540771ms
Sending response {"id": 850, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":851,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 851, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":305},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  (* Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list) *)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":852,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 852, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":853,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":53,"character":10},"end":{"line":64,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 853, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":854,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 854, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":855,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":53,"character":2}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Sending response {"id": 855, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":856,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":53,"character":2},"end":{"line":53,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0162124633789ms
Sending response {"id": 856, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":857,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":53,"character":2},"end":{"line":62,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 857, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":858,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":53,"character":2},"end":{"line":63,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Sending response {"id": 858, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":859,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":53,"character":2},"end":{"line":62,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 859, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":306},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  (* (* Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      ) *)\n    owners ([] : hook_entry_point list) *)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":860,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0209808349609ms
Sending response {"id": 860, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":861,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":53,"character":5},"end":{"line":62,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 861, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":862,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 862, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":307},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  (* Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list) *)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":863,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.018835067749ms
Sending response {"id": 863, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":864,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":53,"character":5},"end":{"line":62,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 864, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":865,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 865, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":866,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":62,"character":7},"end":{"line":62,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0219345092773ms
Sending response {"id": 866, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":867,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":61,"character":54},"end":{"line":61,"character":54}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 867, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":868,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":63,"character":42},"end":{"line":63,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 868, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":308},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  (* Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list) *\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":869,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 869, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":310},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  (* Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":870,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 870, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":871,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":63,"character":39},"end":{"line":63,"character":39}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 871, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":872,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0221729278564ms
Sending response {"id": 872, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":873,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":53,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.0288486480713ms
Sending response {"id": 873, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":874,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":53,"character":5}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Sending response {"id": 874, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":875,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":53,"character":5},"end":{"line":53,"character":5}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 875, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":876,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":63,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Sending response {"id": 876, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":312},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  (Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":877,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0190734863281ms
Sending response {"id": 877, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":878,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":53,"character":3},"end":{"line":53,"character":3}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 878, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":879,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 879, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":313},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n    ([] : hook_entry_point list) \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":880,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0138282775879ms
Sending response {"id": 880, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":881,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":53,"character":2},"end":{"line":53,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0209808349609ms
Sending response {"id": 881, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":882,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 882, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":883,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":64,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Sending response {"id": 883, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":884,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":64,"character":19},"end":{"line":64,"character":19}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0181198120117ms
Sending response {"id": 884, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":885,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":64,"character":19}}}
[server] Got a method textDocument/definition
[server] processing took 0.00905990600586ms
Sending response {"id": 885, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":886,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":64,"character":4},"end":{"line":64,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0391006469727ms
Sending response {"id": 886, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":887,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":64,"character":4},"end":{"line":64,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 887, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":314},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n    \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":888,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.018835067749ms
Sending response {"id": 888, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":315},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n  \n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":889,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 889, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":890,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0209808349609ms
Sending response {"id": 890, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":316},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":891,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0200271606445ms
Sending response {"id": 891, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":892,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 892, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":317},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":893,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.018835067749ms
Sending response {"id": 893, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":894,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":63,"character":39},"end":{"line":63,"character":39}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0360012054443ms
Sending response {"id": 894, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":895,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 895, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":896,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.014066696167ms
Sending response {"id": 896, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":317},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_hook_params * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":317}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":897,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":63,"character":39},"end":{"line":63,"character":39}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Sending response {"id": 897, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":898,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":61,"character":28}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 898, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":899,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":50,"character":23}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 899, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":900,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":50,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 900, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":901,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":50,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 901, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":902,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":50,"character":24},"end":{"line":50,"character":24}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 902, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":903,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":50,"character":4},"end":{"line":50,"character":29}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 903, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":904,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":66,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.0171661376953ms
Sending response {"id": 904, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":905,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":66,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 905, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":906,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":66,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 906, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":907,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":66,"character":4},"end":{"line":66,"character":24}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0200271606445ms
Sending response {"id": 907, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":318},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":908,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 908, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":909,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":66,"character":29},"end":{"line":66,"character":29}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0228881835938ms
Sending response {"id": 909, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":910,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 910, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":911,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0178813934326ms
Sending response {"id": 911, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":318},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * operation) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":318}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":912,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":66,"character":29},"end":{"line":66,"character":29}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Sending response {"id": 912, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":913,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":65,"character":35}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 913, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":914,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":127,"character":54}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 914, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":915,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":127,"character":56}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 915, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":916,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":127,"character":56}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 916, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":917,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":127,"character":56}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 917, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":918,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":127,"character":53}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 918, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":919,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":127,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 919, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":920,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":127,"character":26},"end":{"line":127,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 920, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":921,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":127,"character":56}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 921, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":922,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":127,"character":56}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 922, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":923,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":127,"character":51},"end":{"line":127,"character":60}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 923, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":319},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * hook_entry_point) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":924,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 924, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":925,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":127,"character":67},"end":{"line":127,"character":67}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.018835067749ms
Sending response {"id": 925, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":926,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 926, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":927,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0171661376953ms
Sending response {"id": 927, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":319},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, o : (hook_entry_point list) * hook_entry_point) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":319}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":928,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":127,"character":67},"end":{"line":127,"character":67}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 928, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":929,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":127,"character":22}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 929, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":930,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":127,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 930, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":931,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":127,"character":22},"end":{"line":127,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 931, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":320},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l,  : (hook_entry_point list) * hook_entry_point) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":321},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, e : (hook_entry_point list) * hook_entry_point) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":932,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 932, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":933,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":127,"character":22},"end":{"line":127,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 933, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":934,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0138282775879ms
Sending response {"id": 934, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":322},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, ep : (hook_entry_point list) * hook_entry_point) -> o :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":935,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 935, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":936,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":127,"character":23},"end":{"line":127,"character":23}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 936, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":937,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 937, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":938,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":127,"character":74}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Sending response {"id": 938, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":939,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":127,"character":74}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Sending response {"id": 939, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":940,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":127,"character":74},"end":{"line":127,"character":74}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 940, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":323},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, ep : (hook_entry_point list) * hook_entry_point) ->  :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":941,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 941, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":942,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 942, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":324},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, ep : (hook_entry_point list) * hook_entry_point) -> e :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":943,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":127,"character":74},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 943, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":325},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, ep : (hook_entry_point list) * hook_entry_point) -> ep :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":944,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 944, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":945,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":127,"character":75},"end":{"line":127,"character":75}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 945, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":946,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0209808349609ms
Sending response {"id": 946, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":947,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0100135803223ms
Sending response {"id": 947, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":325},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold (fun (l, ep : (hook_entry_point list) * hook_entry_point) -> ep :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":325}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":948,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":127,"character":75},"end":{"line":127,"character":75}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 948, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":949,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":127,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 949, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":950,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":127,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Sending response {"id": 950, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":951,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":127,"character":11},"end":{"line":127,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 951, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":952,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":127,"character":12},"end":{"line":127,"character":12}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 952, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":326},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold(fun (l, ep : (hook_entry_point list) * hook_entry_point) -> ep :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":953,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 953, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":954,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":127,"character":11},"end":{"line":127,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0147819519043ms
Sending response {"id": 954, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":327},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold\n  (fun (l, ep : (hook_entry_point list) * hook_entry_point) -> ep :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":955,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 955, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":956,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":128,"character":2},"end":{"line":128,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 956, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":957,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 957, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":328},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold\n    (fun (l, ep : (hook_entry_point list) * hook_entry_point) -> ep :: l) receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":958,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 958, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":959,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":128,"character":4},"end":{"line":128,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 959, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":960,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0290870666504ms
Sending response {"id": 960, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":961,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":128,"character":74}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Sending response {"id": 961, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":962,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":128,"character":74}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 962, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":963,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":128,"character":74}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 963, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":964,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":128,"character":74},"end":{"line":128,"character":74}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 964, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":329},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold\n    (fun (l, ep : (hook_entry_point list) * hook_entry_point) -> ep :: l)receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":965,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 965, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":330},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold\n    (fun (l, ep : (hook_entry_point list) * hook_entry_point) -> ep :: l)\n    receiver_ops sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":966,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 966, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":967,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":129,"character":4},"end":{"line":129,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 967, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":968,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 968, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":969,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":125,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 969, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":970,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":125,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 970, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":971,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":125,"character":6},"end":{"line":125,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 971, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":972,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":128,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Sending response {"id": 972, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":973,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":129,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.018835067749ms
Sending response {"id": 973, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":974,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":129,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 974, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":975,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":129,"character":4},"end":{"line":129,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 975, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":331},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold\n    (fun (l, ep : (hook_entry_point list) * hook_entry_point) -> ep :: l)\n    receiver_entries sender_ops\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":976,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 976, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":977,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":129,"character":20},"end":{"line":129,"character":20}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 977, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":978,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 978, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":979,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":124,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Sending response {"id": 979, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":980,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":124,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Sending response {"id": 980, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":981,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":124,"character":6},"end":{"line":124,"character":20}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 981, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":982,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":129,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 982, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":983,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":129,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 983, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":984,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":129,"character":21},"end":{"line":129,"character":31}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 984, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":332},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold\n    (fun (l, ep : (hook_entry_point list) * hook_entry_point) -> ep :: l)\n    receiver_entries sender_entries\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","id":985,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0200271606445ms
Sending response {"id": 985, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":986,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":129,"character":35},"end":{"line":129,"character":35}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 986, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":987,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 987, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":988,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00977516174316ms
Sending response {"id": 988, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":332},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold\n    (fun (l, ep : (hook_entry_point list) * hook_entry_point) -> ep :: l)\n    receiver_entries sender_entries\n\n#endif\n\nlet test (u : unit) = unit"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":332}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":989,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":129,"character":35},"end":{"line":129,"character":35}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 989, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":990,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":133,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 990, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":991,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":133,"character":26},"end":{"line":133,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 991, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":992,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":133,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 992, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":993,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":133,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 993, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":994,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":133,"character":26},"end":{"line":133,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 994, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":995,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":133,"character":0},"end":{"line":133,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 995, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":333},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold\n    (fun (l, ep : (hook_entry_point list) * hook_entry_point) -> ep :: l)\n    receiver_entries sender_entries\n\n#endif\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":996,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 996, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":997,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 997, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":334},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold\n    (fun (l, ep : (hook_entry_point list) * hook_entry_point) -> ep :: l)\n    receiver_entries sender_entries\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":998,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0197887420654ms
Sending response {"id": 998, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":999,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 999, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1000,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0178813934326ms
Sending response {"id": 1000, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":334},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold\n    (fun (l, ep : (hook_entry_point list) * hook_entry_point) -> ep :: l)\n    receiver_entries sender_entries\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":334}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1001,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 1001, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1002,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 1002, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1003,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 1003, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1004,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.00882148742676ms
Sending response {"id": 1004, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1005,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Sending response {"id": 1005, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1006,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 1006, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1007,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":28,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 1007, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1008,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 1008, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1009,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 1009, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1010,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Sending response {"id": 1010, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1011,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":24,"character":0},"end":{"line":25,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1011, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1012,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 1012, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1013,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Sending response {"id": 1013, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1014,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":24,"character":8},"end":{"line":24,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1014, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":4},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let e = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1015,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":9},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Sending response {"id": 1015, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1016,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 1016, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1017,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0247955322266ms
Sending response {"id": 1017, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1018,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 1018, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":6},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let eps = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1019,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 1019, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1020,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":24,"character":11},"end":{"line":24,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1020, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1021,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0150203704834ms
Sending response {"id": 1021, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":8},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let e = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1022,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 1022, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":9},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let  = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1023,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0200271606445ms
Sending response {"id": 1023, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1024,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0181198120117ms
Sending response {"id": 1024, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":10},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let c = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1025,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":9},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Sending response {"id": 1025, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":11},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ca = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1026,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1026, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1027,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":24,"character":10},"end":{"line":24,"character":10}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1027, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1028,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 1028, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":13},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let call = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1029,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 1029, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":15},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callba = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1030,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":14},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 1030, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1031,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 1031, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":16},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbac = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1032,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":15},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Sending response {"id": 1032, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":17},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callback = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1033,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":16},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Sending response {"id": 1033, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":18},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1034,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":17},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Sending response {"id": 1034, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1035,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1035, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1036,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":24,"character":17},"end":{"line":24,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1036, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1037,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0197887420654ms
Sending response {"id": 1037, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1038,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 1038, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1039,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 1039, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1040,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":21}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 1040, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1041,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":21}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 1041, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1042,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":21}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 1042, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1043,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":21}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 1043, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1044,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":21},"end":{"line":25,"character":21}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0200271606445ms
Sending response {"id": 1044, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1045,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":10},"end":{"line":25,"character":21}},"context":{"diagnostics":[{"range":{"start":{"line":25,"character":8},"end":{"line":25,"character":12}},"message":"\"ligo\": Unknown word.","severity":3,"source":"cSpell"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1045, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1046,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":8},"end":{"line":25,"character":21}},"context":{"diagnostics":[{"range":{"start":{"line":25,"character":8},"end":{"line":25,"character":12}},"message":"\"ligo\": Unknown word.","severity":3,"source":"cSpell"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 1046, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1047,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":7},"end":{"line":25,"character":21}},"context":{"diagnostics":[{"range":{"start":{"line":25,"character":8},"end":{"line":25,"character":12}},"message":"\"ligo\": Unknown word.","severity":3,"source":"cSpell"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1047, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1048,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":7}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 1048, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":19},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook\n      (p; michelson_param = pm}, s.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1049,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1049, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1050,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":7},"end":{"line":25,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1050, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1051,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0190734863281ms
Sending response {"id": 1051, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":20},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook\n      p; michelson_param = pm}, s.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1052,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1052, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1053,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":6},"end":{"line":25,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1053, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1054,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 1054, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":21},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook\n    p; michelson_param = pm}, s.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1055,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1055, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1056,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":4},"end":{"line":25,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 1056, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":22},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook\n  p; michelson_param = pm}, s.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1057,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1057, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1058,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":2},"end":{"line":25,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Sending response {"id": 1058, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1059,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 1059, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":23},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook\np; michelson_param = pm}, s.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1060,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1060, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1061,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":0},"end":{"line":25,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1061, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1062,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1062, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":24},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hookp; michelson_param = pm}, s.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1063,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0200271606445ms
Sending response {"id": 1063, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1064,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":24,"character":40},"end":{"line":24,"character":40}},"context":{"diagnostics":[{"range":{"start":{"line":24,"character":36},"end":{"line":24,"character":41}},"message":"\"hookp\": Unknown word.","severity":3,"source":"cSpell"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1064, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1065,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0109672546387ms
Sending response {"id": 1065, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":25},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook p; michelson_param = pm}, s.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1066,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0200271606445ms
Sending response {"id": 1066, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1067,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":24,"character":41},"end":{"line":24,"character":41}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1067, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1068,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 1068, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1069,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":29}}}
[server] Got a method textDocument/hover
[server] processing took 0.0228881835938ms
Sending response {"id": 1069, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1070,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":44}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 1070, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1071,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":43}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Sending response {"id": 1071, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1072,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":41}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 1072, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1073,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":42}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 1073, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1074,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":42}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 1074, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1075,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":24,"character":42},"end":{"line":24,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1075, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1076,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":24,"character":42},"end":{"line":24,"character":65}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1076, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1077,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":24,"character":42},"end":{"line":24,"character":66}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 1077, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1078,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":24,"character":42},"end":{"line":24,"character":65}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0200271606445ms
Sending response {"id": 1078, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":26},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook p, s.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1079,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":42},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0121593475342ms
Sending response {"id": 1079, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1080,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 1080, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1081,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":24,"character":42},"end":{"line":24,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1081, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1082,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 1082, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1083,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":40}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 1083, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1084,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":41}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 1084, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1085,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":24,"character":41},"end":{"line":24,"character":41}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1085, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":27},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1086,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":42}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.0100135803223ms
Sending response {"id": 1086, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1087,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 1087, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1088,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":24,"character":42},"end":{"line":24,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 1088, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1089,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1089, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1090,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":61}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 1090, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1091,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":24,"character":61},"end":{"line":24,"character":61}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 1091, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":28},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    \n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1092,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 1092, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1093,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1093, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":29},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    l\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1094,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":5},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Sending response {"id": 1094, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":31},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1095,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1095, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1096,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":7},"end":{"line":25,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1096, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":32},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let \n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1097,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1097, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1098,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1098, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":33},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let o\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1099,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":9},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Sending response {"id": 1099, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":35},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1100,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 1100, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1101,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":11},"end":{"line":25,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 1101, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1102,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 1102, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":36},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops \n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1103,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1103, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1104,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1104, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":37},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops =\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1105,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1105, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1106,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":13},"end":{"line":25,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 1106, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1107,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 1107, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":38},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = \n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1108,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1108, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1109,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 1109, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":39},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = m\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1110,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":15},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Sending response {"id": 1110, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":40},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = ma\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1111,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1111, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1112,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":16},"end":{"line":25,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1112, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":41},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = mat\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":43},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1113,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1113, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":44},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match \n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1114,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1114, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1115,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0119209289551ms
Sending response {"id": 1115, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":45},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match c\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1116,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":21},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 1116, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":46},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match ca\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":48},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match call\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1117,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1117, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1118,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":24},"end":{"line":25,"character":24}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1118, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1119,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0190734863281ms
Sending response {"id": 1119, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":50},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callba\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1120,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1120, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":53},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1121,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1121, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1122,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":29},"end":{"line":25,"character":29}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1122, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1123,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 1123, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":54},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks \n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1124,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1124, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1125,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1125, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":55},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks w\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1126,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":31},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 1126, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":56},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks wi\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":58},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1127,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1127, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1128,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":34},"end":{"line":25,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1128, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1129,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 1129, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":59},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1130,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1130, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1131,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 1131, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":60},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    \n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1132,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1132, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1133,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1133, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":61},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    |\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1134,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1134, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1135,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":26,"character":5},"end":{"line":26,"character":5}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1135, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1136,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0190734863281ms
Sending response {"id": 1136, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":62},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | \n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1137,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1137, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1138,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0209808349609ms
Sending response {"id": 1138, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":64},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | []\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1139,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1139, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1140,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":26,"character":8},"end":{"line":26,"character":8}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1140, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1141,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1141, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":65},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] \n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1142,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1142, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1143,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 1143, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":66},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1144,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 1144, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1145,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":26,"character":10},"end":{"line":26,"character":10}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 1145, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1146,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 1146, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":67},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] ->\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":68},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> \n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1147,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 1147, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1148,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 1148, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":69},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ()\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1149,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":26,"character":13}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.0109672546387ms
Sending response {"id": 1149, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1150,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 1150, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1151,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":26,"character":13},"end":{"line":26,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1151, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1152,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1152, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":71},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([])\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1153,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0112056732178ms
Sending response {"id": 1153, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1154,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":26,"character":15},"end":{"line":26,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 1154, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1155,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0209808349609ms
Sending response {"id": 1155, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":72},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] )\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1156,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 1156, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1157,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":26,"character":16},"end":{"line":26,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 1157, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":73},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] :)\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1158,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1158, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1159,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":26,"character":17},"end":{"line":26,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1159, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":74},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : )\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1160,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1160, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1161,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":26,"character":18},"end":{"line":26,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1161, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1162,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 1162, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":75},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : o)\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1163,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":26,"character":19},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0190734863281ms
Sending response {"id": 1163, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":77},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : ope)\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1164,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 1164, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1165,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":26,"character":21},"end":{"line":26,"character":21}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 1165, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":79},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : opera)\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1166,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0190734863281ms
Sending response {"id": 1166, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":82},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operatio)\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":83},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation)\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1167,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 1167, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1168,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":26,"character":27},"end":{"line":26,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1168, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1169,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 1169, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":84},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation )\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":85},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation l)\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1170,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":26,"character":29},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 1170, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":88},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1171,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 1171, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1172,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":26,"character":32},"end":{"line":26,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1172, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1173,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1173, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1174,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":26,"character":33},"end":{"line":26,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1174, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":89},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    \n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1175,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1175, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1176,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1176, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":90},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    |\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1177,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1177, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1178,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":5},"end":{"line":27,"character":5}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1178, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1179,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.018835067749ms
Sending response {"id": 1179, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":91},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | \n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1180,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1180, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1181,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0181198120117ms
Sending response {"id": 1181, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":92},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1182,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1182, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1183,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":7},"end":{"line":27,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1183, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":93},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h \n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1184,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1184, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":95},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h ::\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":96},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: \n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":97},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1185,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 1185, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1186,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":12},"end":{"line":27,"character":12}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 1186, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1187,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1187, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":98},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t \n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1188,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 1188, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1189,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 1189, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":99},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1190,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1190, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1191,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":14},"end":{"line":27,"character":14}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1191, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1192,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1192, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":100},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t ->\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1193,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1193, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1194,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":15},"end":{"line":27,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 1194, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1195,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0410079956055ms
Sending response {"id": 1195, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":101},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1196,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1196, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1197,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 1197, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":102},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> L\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1198,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":27,"character":17},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 1198, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":105},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1199,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1199, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1200,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":20},"end":{"line":27,"character":20}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 1200, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1201,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0209808349609ms
Sending response {"id": 1201, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":106},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List.\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1202,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":27,"character":21},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 1202, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1203,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 1203, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1204,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":21},"end":{"line":27,"character":21}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 1204, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":107},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List.f\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1205,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":27,"character":22},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 1205, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":110},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List.fold\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1206,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1206, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1207,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":25},"end":{"line":27,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1207, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1208,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.018835067749ms
Sending response {"id": 1208, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":114},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List.\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1209,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1209, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1210,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":21},"end":{"line":27,"character":21}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 1210, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1211,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 1211, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":115},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List.m\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1212,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":27,"character":22},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 1212, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":117},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List.map\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1213,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0112056732178ms
Sending response {"id": 1213, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1214,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":24},"end":{"line":27,"character":24}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00977516174316ms
Sending response {"id": 1214, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1215,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 1215, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":118},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List.map \n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1216,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1216, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1217,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1217, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":119},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List.map ()\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1218,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":27,"character":26}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00810623168945ms
Sending response {"id": 1218, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1219,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1219, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1220,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":26},"end":{"line":27,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1220, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1221,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1221, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":120},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List.map (f)\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1222,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":27,"character":27},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Sending response {"id": 1222, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":122},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List.map (fun)\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1223,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":27,"character":29},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Sending response {"id": 1223, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":123},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List.map (fun )\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1224,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1224, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1225,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":30},"end":{"line":27,"character":30}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 1225, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1226,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 1226, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":124},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List.map (fun ())\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1227,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":27,"character":31}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.0109672546387ms
Sending response {"id": 1227, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1228,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1228, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1229,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":31},"end":{"line":27,"character":31}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1229, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1230,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1230, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":125},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List.map (fun (c))\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1231,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 1231, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1232,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":32},"end":{"line":27,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 1232, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":126},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List.map (fun (ca))\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1233,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 1233, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1234,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":33},"end":{"line":27,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1234, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":128},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List.map (fun (call))\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1235,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1235, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1236,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":35},"end":{"line":27,"character":35}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1236, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":130},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List.map (fun (callba))\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1237,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0200271606445ms
Sending response {"id": 1237, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":132},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List.map (fun (callback))\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":133},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List.map (fun (callback ))\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1238,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 1238, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1239,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":40},"end":{"line":27,"character":40}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1239, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1240,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 1240, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":135},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List.map (fun (callback : ))\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1241,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1241, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1242,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":42},"end":{"line":27,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1242, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1243,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0259876251221ms
Sending response {"id": 1243, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1244,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 1244, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1245,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 1245, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1246,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 1246, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1247,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":128,"character":45}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 1247, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1248,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":123,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Sending response {"id": 1248, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1249,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":123,"character":6},"end":{"line":123,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1249, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1250,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 1250, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1251,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 1251, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1252,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0150203704834ms
Sending response {"id": 1252, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1253,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":42},"end":{"line":27,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0607967376709ms
Sending response {"id": 1253, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1254,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":22,"character":35}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 1254, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1255,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":22,"character":35}}}
[server] Got a method textDocument/definition
[server] processing took 0.00905990600586ms
Sending response {"id": 1255, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":136},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List.map (fun (callback : hook_entry_point))\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1256,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 1256, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1257,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":58},"end":{"line":27,"character":58}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00977516174316ms
Sending response {"id": 1257, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1258,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1258, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1259,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":59},"end":{"line":27,"character":59}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.018835067749ms
Sending response {"id": 1259, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":137},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List.map (fun (callback : hook_entry_point) )\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1260,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1260, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1261,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":60},"end":{"line":27,"character":60}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 1261, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1262,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0209808349609ms
Sending response {"id": 1262, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":138},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List.map (fun (callback : hook_entry_point) -)\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1263,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1263, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1264,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":61},"end":{"line":27,"character":61}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0441074371338ms
Sending response {"id": 1264, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1265,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 1265, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":139},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List.map (fun (callback : hook_entry_point) ->)\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1266,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 1266, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1267,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":62},"end":{"line":27,"character":62}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 1267, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1268,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 1268, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":140},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> List.map (fun (callback : hook_entry_point) ->\n    )\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1269,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 1269, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1270,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 1270, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1271,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 1271, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1272,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":27,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 1272, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1273,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":27,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 1273, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1274,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":16},"end":{"line":27,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 1274, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":141},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n    List.map (fun (callback : hook_entry_point) ->\n    )\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1275,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 1275, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1276,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 1276, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1277,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1277, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1278,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":28,"character":4},"end":{"line":29,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.018835067749ms
Sending response {"id": 1278, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1279,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":28,"character":4},"end":{"line":29,"character":5}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1279, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":142},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n      )\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1280,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1280, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1281,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":28,"character":4},"end":{"line":29,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 1281, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1282,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1282, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1283,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":7},"end":{"line":29,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0240802764893ms
Sending response {"id": 1283, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":143},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n      )\n      \n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1284,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 1284, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1285,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 1285, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":144},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n      )\n    \n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1286,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1286, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1287,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1287, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":145},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n      )\n    i\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1288,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":30,"character":5},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Sending response {"id": 1288, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":146},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n      )\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1289,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0138282775879ms
Sending response {"id": 1289, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1290,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":30,"character":6},"end":{"line":30,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 1290, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1291,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1291, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1292,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":7},"end":{"line":29,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1292, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":147},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n      ) \n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1293,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0171661376953ms
Sending response {"id": 1293, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1294,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0119209289551ms
Sending response {"id": 1294, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":148},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n      ) c\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1295,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":29,"character":9},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Sending response {"id": 1295, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":149},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n      ) ca\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":151},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n      ) call\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1296,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1296, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1297,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":12},"end":{"line":29,"character":12}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 1297, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1298,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0150203704834ms
Sending response {"id": 1298, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":153},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n      ) callba\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1299,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1299, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":156},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1300,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 1300, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1301,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":17},"end":{"line":29,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1301, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1302,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0190734863281ms
Sending response {"id": 1302, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1303,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":28,"character":52},"end":{"line":28,"character":52}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1303, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":157},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n      \n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1304,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1304, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1305,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 1305, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":158},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        \n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1306,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 1306, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1307,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1307, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":159},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        m\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1308,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":29,"character":9},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Sending response {"id": 1308, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":160},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        ma\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1309,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1309, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1310,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":10},"end":{"line":29,"character":10}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 1310, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":161},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        mat\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":163},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        match\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1311,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 1311, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1312,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":13},"end":{"line":29,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0259876251221ms
Sending response {"id": 1312, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1313,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0209808349609ms
Sending response {"id": 1313, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":164},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        match \n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1314,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 1314, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1315,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0209808349609ms
Sending response {"id": 1315, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":165},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        match c\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1316,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":29,"character":15},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Sending response {"id": 1316, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":166},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        match ca\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1317,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1317, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1318,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":16},"end":{"line":29,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1318, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1319,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0209808349609ms
Sending response {"id": 1319, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":168},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        match call\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1320,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1320, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1321,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":18},"end":{"line":29,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 1321, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":170},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        match callba\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1322,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.018835067749ms
Sending response {"id": 1322, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":172},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        match callback\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1323,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0190734863281ms
Sending response {"id": 1323, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1324,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":22},"end":{"line":29,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1324, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":173},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        match callback \n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1325,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1325, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1326,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1326, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":174},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        match callback w\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1327,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":29,"character":24},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.014066696167ms
Sending response {"id": 1327, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":177},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        match callback with\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1328,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1328, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1329,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":27},"end":{"line":29,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1329, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1330,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 1330, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":178},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        match callback with \n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1331,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1331, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1332,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1332, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1333,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0109672546387ms
Sending response {"id": 1333, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":178},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        match callback with \n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":178}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1334,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":8},"end":{"line":29,"character":28}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0190734863281ms
Sending response {"id": 1334, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1335,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":0},"end":{"line":29,"character":28}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1335, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":179},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1336,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 1336, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1337,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0190734863281ms
Sending response {"id": 1337, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":180},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1338,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1338, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1339,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":28,"character":52},"end":{"line":28,"character":52}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1339, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1340,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1340, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1341,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":28,"character":39}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 1341, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1342,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 1342, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1343,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0109672546387ms
Sending response {"id": 1343, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1344,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 1344, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1345,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":123,"character":6},"end":{"line":123,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 1345, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1346,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":128,"character":51}}}
[server] Got a method textDocument/hover
[server] processing took 0.018835067749ms
Sending response {"id": 1346, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1347,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 1347, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1348,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 1348, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1349,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 1349, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1350,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":28,"character":52},"end":{"line":28,"character":52}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 1350, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1351,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":29,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 1351, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1352,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":29,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 1352, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1353,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":8},"end":{"line":29,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1353, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1354,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":28,"character":52},"end":{"line":28,"character":52}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0209808349609ms
Sending response {"id": 1354, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":181},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n      \n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1355,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0138282775879ms
Sending response {"id": 1355, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1356,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0190734863281ms
Sending response {"id": 1356, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":182},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        \n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1357,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.018835067749ms
Sending response {"id": 1357, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1358,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1358, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":183},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        O\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1359,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":29,"character":9},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 1359, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":184},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Op\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1360,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1360, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1361,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":10},"end":{"line":29,"character":10}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1361, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1362,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1362, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":185},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Ope\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":187},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Opera\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1363,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1363, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":191},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1364,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0190734863281ms
Sending response {"id": 1364, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1365,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":17},"end":{"line":29,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 1365, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1366,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 1366, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":192},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1367,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":29,"character":18},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Sending response {"id": 1367, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1368,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1368, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1369,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":18},"end":{"line":29,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1369, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":193},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.t\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1370,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":29,"character":19},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 1370, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":195},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.tra\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":198},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transa\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":199},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transac\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1371,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1371, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":201},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transacti\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1372,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":29,"character":27},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Sending response {"id": 1372, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":202},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transactio\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1373,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":29,"character":28},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 1373, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":203},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1374,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":29,"character":29},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Sending response {"id": 1374, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1375,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 1375, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1376,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":29},"end":{"line":29,"character":29}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1376, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1377,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1377, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":204},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction \n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1378,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0169277191162ms
Sending response {"id": 1378, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1379,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 1379, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":205},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction p\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1380,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":29,"character":31},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Sending response {"id": 1380, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1381,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1381, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1382,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":31},"end":{"line":29,"character":31}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1382, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":206},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1383,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1383, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1384,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":32},"end":{"line":29,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1384, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1385,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0197887420654ms
Sending response {"id": 1385, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":207},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm \n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1386,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0190734863281ms
Sending response {"id": 1386, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1387,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 1387, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":208},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1388,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1388, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1389,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":34},"end":{"line":29,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1389, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":209},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0m\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1390,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":29,"character":35},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 1390, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":210},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mu\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1391,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":29,"character":36},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Sending response {"id": 1391, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1392,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 1392, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1393,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":36},"end":{"line":29,"character":36}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1393, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":211},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mut\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1394,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":29,"character":37},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Sending response {"id": 1394, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":212},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mute\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1395,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":29,"character":38},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 1395, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1396,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1396, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1397,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":38},"end":{"line":29,"character":38}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 1397, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":213},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mutez\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1398,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":29,"character":39},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Sending response {"id": 1398, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1399,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1399, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1400,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":39},"end":{"line":29,"character":39}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1400, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1401,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0209808349609ms
Sending response {"id": 1401, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":214},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mutez \n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1402,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 1402, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1403,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0119209289551ms
Sending response {"id": 1403, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":215},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mutez c\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1404,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":29,"character":41},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Sending response {"id": 1404, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":216},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mutez ca\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1405,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 1405, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1406,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":42},"end":{"line":29,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 1406, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":218},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mutez call\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1407,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1407, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1408,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":44},"end":{"line":29,"character":44}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 1408, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":220},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mutez callba\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1409,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0138282775879ms
Sending response {"id": 1409, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":222},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mutez callback\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1410,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 1410, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1411,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":48},"end":{"line":29,"character":48}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0209808349609ms
Sending response {"id": 1411, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1412,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0138282775879ms
Sending response {"id": 1412, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1413,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0159740447998ms
Sending response {"id": 1413, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":222},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mutez callback\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":222}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1414,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":23,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 1414, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1415,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":30,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Sending response {"id": 1415, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","languageId":"ocaml","version":1,"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}}}
Read message 
{"jsonrpc":"2.0","id":1416,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 1416, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1417,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 1417, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1418,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 1418, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1419,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 1419, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1420,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":79,"character":44},"end":{"line":79,"character":44}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 1420, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1421,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":80,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Sending response {"id": 1421, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1422,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":80,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Sending response {"id": 1422, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1423,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":80,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 1423, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1424,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":80,"character":8},"end":{"line":80,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1424, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":2},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let c = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1425,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":80,"character":9},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Sending response {"id": 1425, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":3},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ca = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1426,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1426, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1427,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":80,"character":10},"end":{"line":80,"character":10}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1427, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":5},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let call = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":7},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callba = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1428,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":80,"character":14},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Sending response {"id": 1428, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1429,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 1429, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":8},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbac = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1430,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":80,"character":15},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 1430, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":9},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callback = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1431,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":80,"character":16},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0190734863281ms
Sending response {"id": 1431, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":10},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1432,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 1432, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1433,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":80,"character":17},"end":{"line":80,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 1433, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1434,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1434, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1435,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":79,"character":36}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 1435, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1436,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":71,"character":38}}}
[server] Got a method textDocument/hover
[server] processing took 0.0221729278564ms
Sending response {"id": 1436, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1437,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1437, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1438,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0109672546387ms
Sending response {"id": 1438, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1439,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 1439, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1440,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":29,"character":48},"end":{"line":29,"character":48}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 1440, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1441,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":26}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 1441, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1442,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":26,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 1442, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1443,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 1443, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1444,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 1444, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1445,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Sending response {"id": 1445, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1446,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 1446, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1447,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":4},"end":{"line":31,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1447, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1448,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 1448, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1449,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 1449, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1450,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 1450, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1451,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":80,"character":17},"end":{"line":80,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 1451, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1452,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":80,"character":50}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 1452, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1453,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":80,"character":50},"end":{"line":80,"character":50}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1453, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":11},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = custom_transfer_hook (p, s) in\n    \n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1454,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1454, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1455,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1455, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":12},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = custom_transfer_hook (p, s) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mutez callback\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1456,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1456, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1457,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":87,"character":6},"end":{"line":87,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 1457, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1458,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0269412994385ms
Sending response {"id": 1458, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1459,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0171661376953ms
Sending response {"id": 1459, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":12},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = custom_transfer_hook (p, s) in\n    let ops = match callbacks with\n    | [] -> ([] : operation list)\n    | h :: t -> \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mutez callback\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":12}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1460,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 1460, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1461,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 1461, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1462,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 1462, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1463,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":4},"end":{"line":31,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 1463, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1464,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":27}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 1464, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1465,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":28},"end":{"line":25,"character":28}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00977516174316ms
Sending response {"id": 1465, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1466,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":28,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 1466, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1467,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":30,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Sending response {"id": 1467, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1468,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":27,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 1468, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1469,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":26,"character":6},"end":{"line":27,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 1469, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1470,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":15},"end":{"line":27,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1470, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1471,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":14},"end":{"line":27,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1471, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1472,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 1472, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":223},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = \n      List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mutez callback\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1473,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 1473, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1474,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1474, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1475,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":28,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.0147819519043ms
Sending response {"id": 1475, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1476,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":27,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 1476, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1477,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":26,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.0197887420654ms
Sending response {"id": 1477, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1478,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":26,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 1478, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1479,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":26,"character":6},"end":{"line":26,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 1479, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":224},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = \n    List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mutez callback\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":226},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = \nList.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mutez callback\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1480,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 1480, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1481,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":26,"character":0},"end":{"line":26,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 1481, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":227},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mutez callback\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1482,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1482, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1483,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":14},"end":{"line":25,"character":14}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1483, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1484,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1484, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1485,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0109672546387ms
Sending response {"id": 1485, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":227},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = owners_transfer_hook (p, s.descriptor) in\n    let ops = List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mutez callback\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":227}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1486,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":28,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 1486, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1487,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":28,"character":6},"end":{"line":28,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 1487, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1488,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":26,"character":4},"end":{"line":28,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 1488, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1489,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":6},"end":{"line":28,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 1489, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1490,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":5},"end":{"line":28,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 1490, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1491,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":24,"character":4},"end":{"line":28,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 1491, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1492,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 1492, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1493,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":4}}}
[server] Got a method textDocument/definition
[server] processing took 0.00905990600586ms
Sending response {"id": 1493, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1494,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":18,"character":28}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 1494, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1495,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":7,"character":22}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 1495, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1496,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 1496, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1497,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 1497, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1498,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 1498, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1499,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":87,"character":6},"end":{"line":87,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 1499, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1500,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":86,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 1500, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1501,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":86,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Sending response {"id": 1501, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1502,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":81,"character":6},"end":{"line":87,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1502, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1503,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":81,"character":5},"end":{"line":87,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1503, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1504,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":81,"character":4},"end":{"line":87,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Sending response {"id": 1504, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1505,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":81,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Sending response {"id": 1505, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1506,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":80,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Sending response {"id": 1506, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1507,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":80,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 1507, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1508,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":80,"character":8},"end":{"line":80,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0209808349609ms
Sending response {"id": 1508, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":13},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = custom_transfer_hook (p, s) in\n    \n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1509,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 1509, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1510,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0209808349609ms
Sending response {"id": 1510, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":14},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let callbacks = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1511,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":80,"character":50},"end":{"line":80,"character":50}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1511, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1512,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 1512, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1513,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0209808349609ms
Sending response {"id": 1513, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":15},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1514,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":80,"character":8},"end":{"line":80,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 1514, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1515,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1515, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1516,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1516, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1517,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":80,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Sending response {"id": 1517, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1518,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":80,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Sending response {"id": 1518, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1519,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":80,"character":14},"end":{"line":80,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1519, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1520,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":39,"character":4},"end":{"line":39,"character":24}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1520, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1521,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":39,"character":66}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 1521, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1522,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":40,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 1522, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1523,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":40,"character":15}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 1523, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1524,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":40,"character":2},"end":{"line":40,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 1524, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1525,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":35,"character":29}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Sending response {"id": 1525, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1526,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":23,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 1526, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1527,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":23,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 1527, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1528,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":23,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 1528, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1529,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":23,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 1529, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1530,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":23,"character":2},"end":{"line":23,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 1530, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":17},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  leSet.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":18},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  letSet.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1531,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1531, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1532,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":23,"character":5},"end":{"line":23,"character":5}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Sending response {"id": 1532, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1533,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1533, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":19},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  let Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1534,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1534, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1535,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":23,"character":6},"end":{"line":23,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 1535, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1536,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0109672546387ms
Sending response {"id": 1536, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":21},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  let caSet.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1537,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 1537, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1538,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":23,"character":8},"end":{"line":23,"character":8}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Sending response {"id": 1538, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":23},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  let callSet.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1539,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1539, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1540,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":23,"character":10},"end":{"line":23,"character":10}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1540, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":25},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  let callbaSet.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1541,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1541, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":28},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  let callbacksSet.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1542,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1542, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1543,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":23,"character":15},"end":{"line":23,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0171661376953ms
Sending response {"id": 1543, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1544,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0138282775879ms
Sending response {"id": 1544, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":29},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  let callbacks Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1545,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1545, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1546,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":23,"character":16},"end":{"line":23,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1546, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1547,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.02121925354ms
Sending response {"id": 1547, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":30},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  let callbacks =Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1548,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1548, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1549,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":23,"character":17},"end":{"line":23,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 1549, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1550,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1550, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":31},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  let callbacks = Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1551,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1551, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1552,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":23,"character":18},"end":{"line":23,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1552, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1553,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1553, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1554,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":37,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 1554, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1555,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":37,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.0219345092773ms
Sending response {"id": 1555, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1556,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":37,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 1556, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1557,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":37,"character":20},"end":{"line":37,"character":29}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0209808349609ms
Sending response {"id": 1557, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1558,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":19,"character":52}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Sending response {"id": 1558, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1559,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 1559, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1560,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 1560, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1561,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 1561, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1562,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":123,"character":6},"end":{"line":123,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 1562, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1563,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":15,"character":42}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 1563, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1564,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 1564, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1565,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 1565, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1566,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1566, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1567,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":37,"character":20},"end":{"line":37,"character":29}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 1567, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1568,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":27,"character":43}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 1568, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1569,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":28,"character":60}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 1569, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1570,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":28,"character":60},"end":{"line":28,"character":60}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 1570, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1571,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":32,"character":76}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Sending response {"id": 1571, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":32},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  let callbacks =Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1572,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":23,"character":17},"end":{"line":23,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1572, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1573,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 1573, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1574,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1574, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":33},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  let callbacksSet.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1575,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":23,"character":15},"end":{"line":23,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1575, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1576,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 1576, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1577,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0112056732178ms
Sending response {"id": 1577, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":34},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  letSet.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1578,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":23,"character":5},"end":{"line":23,"character":5}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1578, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1579,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 1579, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1580,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1580, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":35},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let pm = transfer_descriptor_param_to_michelson p in\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1581,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":23,"character":2},"end":{"line":23,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1581, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1582,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 1582, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1583,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1583, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1584,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":28,"character":60}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 1584, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1585,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":28,"character":60},"end":{"line":28,"character":60}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1585, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1586,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":28,"character":8},"end":{"line":28,"character":60}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1586, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":36},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1587,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 1587, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1588,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0138282775879ms
Sending response {"id": 1588, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1589,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":21,"character":66}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Sending response {"id": 1589, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1590,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":21,"character":66},"end":{"line":21,"character":66}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 1590, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":37},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  \n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1591,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0138282775879ms
Sending response {"id": 1591, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1592,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.018835067749ms
Sending response {"id": 1592, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":38},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook p ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1593,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1593, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1594,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":22,"character":54},"end":{"line":22,"character":54}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1594, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1595,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1595, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1596,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":81,"character":27}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 1596, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1597,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":81,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Sending response {"id": 1597, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1598,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":81,"character":14},"end":{"line":81,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0178813934326ms
Sending response {"id": 1598, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1599,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":81,"character":30}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 1599, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1600,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":79,"character":30}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 1600, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1601,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":79,"character":30}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Sending response {"id": 1601, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1602,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":79,"character":29}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 1602, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1603,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":79,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 1603, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1604,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":79,"character":29},"end":{"line":79,"character":29}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 1604, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":39},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1605,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1605, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1606,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":79,"character":30},"end":{"line":79,"character":30}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1606, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1607,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 1607, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1608,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":79,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 1608, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1609,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":79,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 1609, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1610,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":79,"character":4},"end":{"line":79,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0209808349609ms
Sending response {"id": 1610, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1611,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_transfer_hook_lib.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Sending response {"id": 1611, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1612,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_transfer_hook_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0119209289551ms
Sending response {"id": 1612, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1613,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_transfer_hook_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 1613, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1614,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_transfer_hook_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0190734863281ms
Sending response {"id": 1614, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1615,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_transfer_hook_lib.mligo"},"range":{"start":{"line":6,"character":3},"end":{"line":6,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 1615, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/fa2_hook.mligo","languageId":"ocaml","version":1,"text":"(** \nOptional FA2 contract entry point to setup a transfer hook contract.\nTransfer hook is one recommended design pattern to implement FA2 that enables\nseparation of the core token transfer logic and a permission policy. Instead of\nimplementing FA2 as a monolithic contract, a permission policy can be implemented\nas a separate contract. Permission policy contract provides an entry point invoked\nby the core FA2 contract to accept or reject a particular transfer operation (such\nan entry point is called transfer hook)\n *)\n\n#if !FA2_HOOK\n#define FA2_HOOK\n\n#include \"fa2_interface.mligo\"\n\n\ntype set_hook_param = {\n  hook : unit -> transfer_descriptor_param_michelson contract;\n  permissions_descriptor : permissions_descriptor;\n}\n\ntype set_hook_param_aux = {\n  hook : unit -> transfer_descriptor_param_michelson contract;\n  permissions_descriptor : permissions_descriptor_michelson;\n}\n\ntype set_hook_param_michelson = set_hook_param_aux michelson_pair_right_comb\n\ntype fa2_with_hook_entry_points =\n  | Set_transfer_hook of set_hook_param_michelson\n\n#endif\n"}}}
Read message 
{"jsonrpc":"2.0","id":1616,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/fa2_hook.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 1616, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1617,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/fa2_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 1617, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1618,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/fa2_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 1618, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1619,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/fa2_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1619, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1620,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/fa2_hook.mligo"},"range":{"start":{"line":8,"character":3},"end":{"line":8,"character":3}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 1620, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1621,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/fa2_hook.mligo"},"position":{"line":6,"character":63}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Sending response {"id": 1621, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/fa2_interface.mligo","languageId":"ocaml","version":1,"text":"#if ! FA2_INTERFACE\n#define FA2_INTERFACE\n\ntype token_id = nat\n\ntype transfer_destination = {\n  to_ : address;\n  token_id : token_id;\n  amount : nat;\n}\n\ntype transfer_destination_michelson = transfer_destination michelson_pair_right_comb\n\ntype transfer = {\n  from_ : address;\n  txs : transfer_destination list;\n}\n\ntype transfer_aux = {\n  from_ : address;\n  txs : transfer_destination_michelson list;\n}\n\ntype transfer_michelson = transfer_aux michelson_pair_right_comb\n\ntype balance_of_request = {\n  owner : address;\n  token_id : token_id;\n}\n\ntype balance_of_request_michelson = balance_of_request michelson_pair_right_comb\n\ntype balance_of_response = {\n  request : balance_of_request;\n  balance : nat;\n}\n\ntype balance_of_response_aux = {\n  request : balance_of_request_michelson;\n  balance : nat;\n}\n\ntype balance_of_response_michelson = balance_of_response_aux michelson_pair_right_comb\n\ntype balance_of_param = {\n  requests : balance_of_request list;\n  callback : (balance_of_response_michelson list) contract;\n}\n\ntype balance_of_param_aux = {\n  requests : balance_of_request_michelson list;\n  callback : (balance_of_response_michelson list) contract;\n}\n\ntype balance_of_param_michelson = balance_of_param_aux michelson_pair_right_comb\n\ntype operator_param = {\n  owner : address;\n  operator : address;\n}\n\ntype operator_param_michelson = operator_param michelson_pair_right_comb\n\ntype update_operator =\n  | Add_operator_p of operator_param\n  | Remove_operator_p of operator_param\n\ntype update_operator_aux =\n  | Add_operator of operator_param_michelson\n  | Remove_operator of operator_param_michelson\n\ntype update_operator_michelson = update_operator_aux michelson_or_right_comb\n\ntype token_metadata = {\n  token_id : token_id;\n  symbol : string;\n  name : string;\n  decimals : nat;\n  extras : (string, string) map;\n}\n\ntype token_metadata_michelson = token_metadata michelson_pair_right_comb\n\ntype token_metadata_param = {\n  token_ids : token_id list;\n  handler : (token_metadata_michelson list) -> unit;\n}\n\ntype token_metadata_param_michelson = token_metadata_param michelson_pair_right_comb\n\ntype fa2_entry_points =\n  | Transfer of transfer_michelson list\n  | Balance_of of balance_of_param_michelson\n  | Update_operators of update_operator_michelson list\n  | Token_metadata_registry of address contract\n\n\ntype fa2_token_metadata =\n  | Token_metadata of token_metadata_param_michelson\n\n(* permission policy definition *)\n\ntype operator_transfer_policy =\n  | No_transfer\n  | Owner_transfer\n  | Owner_or_operator_transfer\n\ntype operator_transfer_policy_michelson = operator_transfer_policy michelson_or_right_comb\n\ntype owner_hook_policy =\n  | Owner_no_hook\n  | Optional_owner_hook\n  | Required_owner_hook\n\ntype owner_hook_policy_michelson = owner_hook_policy michelson_or_right_comb\n\ntype custom_permission_policy = {\n  tag : string;\n  config_api: address option;\n}\n\ntype custom_permission_policy_michelson = custom_permission_policy michelson_pair_right_comb\n\ntype permissions_descriptor = {\n  operator : operator_transfer_policy;\n  receiver : owner_hook_policy;\n  sender : owner_hook_policy;\n  custom : custom_permission_policy option;\n}\n\ntype permissions_descriptor_aux = {\n  operator : operator_transfer_policy_michelson;\n  receiver : owner_hook_policy_michelson;\n  sender : owner_hook_policy_michelson;\n  custom : custom_permission_policy_michelson option;\n}\n\ntype permissions_descriptor_michelson = permissions_descriptor_aux michelson_pair_right_comb\n\ntype fa2_entry_points_custom =\n  | Permissions_descriptor of permissions_descriptor_michelson contract\n\n\ntype transfer_destination_descriptor = {\n  to_ : address option;\n  token_id : token_id;\n  amount : nat;\n}\n\ntype transfer_destination_descriptor_michelson =\n  transfer_destination_descriptor michelson_pair_right_comb\n\ntype transfer_descriptor = {\n  from_ : address option;\n  txs : transfer_destination_descriptor list\n}\n\ntype transfer_descriptor_aux = {\n  from_ : address option;\n  txs : transfer_destination_descriptor_michelson list\n}\n\ntype transfer_descriptor_michelson = transfer_descriptor_aux michelson_pair_right_comb\n\ntype transfer_descriptor_param = {\n  batch : transfer_descriptor list;\n  operator : address;\n}\n\ntype transfer_descriptor_param_aux = {\n  batch : transfer_descriptor_michelson list;\n  operator : address;\n}\n\ntype transfer_descriptor_param_michelson = transfer_descriptor_param_aux michelson_pair_right_comb\n\ntype fa2_token_receiver =\n  | Tokens_received of transfer_descriptor_param_michelson\n\ntype fa2_token_sender =\n  | Tokens_sent of transfer_descriptor_param_michelson\n\n#endif\n"}}}
Read message 
{"jsonrpc":"2.0","id":1622,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/fa2_interface.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 1622, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1623,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/fa2_interface.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 1623, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1624,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/fa2_interface.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 1624, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1625,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/fa2_interface.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":183,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 1625, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1626,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/fa2_interface.mligo"},"range":{"start":{"line":170,"character":36},"end":{"line":170,"character":36}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1626, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1627,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/fa2_interface.mligo"},"position":{"line":170,"character":36}}}
[server] Got a method textDocument/definition
[server] processing took 0.00905990600586ms
Sending response {"id": 1627, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1628,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/fa2_interface.mligo"},"position":{"line":162,"character":39}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 1628, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1629,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 1629, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1630,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 1630, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1631,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 1631, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1632,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":79,"character":4},"end":{"line":79,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 1632, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1633,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":76,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 1633, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1634,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":77,"character":29}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Sending response {"id": 1634, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1635,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":72,"character":56}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 1635, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1636,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":72,"character":56},"end":{"line":72,"character":56}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1636, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":40},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1637,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":72,"character":57},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 1637, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1638,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1638, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1639,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":72,"character":57},"end":{"line":72,"character":57}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1639, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1640,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0109672546387ms
Sending response {"id": 1640, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":42},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_mi\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1641,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1641, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1642,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":72,"character":59},"end":{"line":72,"character":59}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1642, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":45},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_miche\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":48},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelso\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":49},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1643,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0190734863281ms
Sending response {"id": 1643, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1644,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":72,"character":66},"end":{"line":72,"character":66}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1644, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1645,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0190734863281ms
Sending response {"id": 1645, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1646,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":73,"character":39}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 1646, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":50},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1647,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":72,"character":56},"end":{"line":72,"character":56}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1647, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1648,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 1648, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1649,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1649, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":51},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1650,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":72,"character":57},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Sending response {"id": 1650, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1651,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1651, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1652,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":72,"character":57},"end":{"line":72,"character":57}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Sending response {"id": 1652, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1653,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 1653, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":53},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_mi\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1654,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 1654, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1655,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":72,"character":59},"end":{"line":72,"character":59}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 1655, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":56},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_miche\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1656,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1656, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":59},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelso\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":60},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1657,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 1657, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1658,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":72,"character":66},"end":{"line":72,"character":66}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1658, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1659,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1659, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1660,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0109672546387ms
Sending response {"id": 1660, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":60},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":60}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1661,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":79,"character":33},"end":{"line":79,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1661, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":61},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n  \n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1662,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 1662, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1663,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0231266021729ms
Sending response {"id": 1663, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":62},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1664,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1664, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1665,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 1665, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":63},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1666,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 1666, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1667,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":79,"character":33},"end":{"line":79,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 1667, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1668,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1668, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1669,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":81,"character":44}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Sending response {"id": 1669, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1670,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":81,"character":44},"end":{"line":81,"character":44}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1670, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1671,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":80,"character":64}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 1671, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1672,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":80,"character":64},"end":{"line":80,"character":64}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0209808349609ms
Sending response {"id": 1672, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":64},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    \n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1673,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 1673, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1674,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1674, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":65},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    l\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1675,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":81,"character":5},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00882148742676ms
Sending response {"id": 1675, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":66},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    le\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":67},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1676,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 1676, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1677,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":81,"character":7},"end":{"line":81,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1677, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1678,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.02121925354ms
Sending response {"id": 1678, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":68},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let \n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1679,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1679, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1680,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1680, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":69},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let =\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1681,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1681, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1682,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":81,"character":9},"end":{"line":81,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Sending response {"id": 1682, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":70},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let = \n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1683,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1683, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1684,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 1684, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":72},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let \n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1685,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1685, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1686,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1686, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":73},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let =\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1687,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1687, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1688,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":81,"character":9},"end":{"line":81,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 1688, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1689,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 1689, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":74},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let \n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1690,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1690, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":75},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1691,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":81,"character":9},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 1691, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1692,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1692, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1693,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":81,"character":9},"end":{"line":81,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1693, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":76},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p \n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1694,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1694, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":77},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p =\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1695,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1695, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1696,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":81,"character":11},"end":{"line":81,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1696, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1697,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0197887420654ms
Sending response {"id": 1697, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":78},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = \n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1698,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 1698, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1699,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 1699, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1700,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":64,"character":58}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 1700, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1701,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 1701, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/fa2_hook.mligo"}}}
Read message 
{"jsonrpc":"2.0","id":1702,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1702, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1703,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 1703, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1704,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 1704, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1705,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":24,"character":4},"end":{"line":28,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 1705, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1706,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":28,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 1706, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1707,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":28,"character":6},"end":{"line":28,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00977516174316ms
Sending response {"id": 1707, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1708,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":22,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 1708, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1709,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":22,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 1709, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1710,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":22,"character":4},"end":{"line":22,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 1710, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1711,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":22,"character":4},"end":{"line":22,"character":58}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1711, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1712,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 1712, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1713,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0109672546387ms
Sending response {"id": 1713, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1714,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 1714, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1715,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":72,"character":32}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 1715, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1716,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":72,"character":32}}}
[server] Got a method textDocument/definition
[server] processing took 0.00905990600586ms
Sending response {"id": 1716, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":79},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1717,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1717, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1718,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":81,"character":66},"end":{"line":81,"character":66}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1718, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1719,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 1719, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1720,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":81,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 1720, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1721,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":81,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 1721, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1722,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":81,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 1722, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1723,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":81,"character":12},"end":{"line":81,"character":12}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 1723, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1724,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":81,"character":4},"end":{"line":81,"character":12}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1724, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1725,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":81,"character":6},"end":{"line":81,"character":12}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1725, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1726,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":81,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 1726, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1727,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":81,"character":6},"end":{"line":81,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1727, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1728,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":81,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 1728, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1729,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":81,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 1729, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1730,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":81,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 1730, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1731,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":81,"character":12},"end":{"line":81,"character":12}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1731, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1732,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":81,"character":6},"end":{"line":81,"character":12}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1732, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1733,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":81,"character":4},"end":{"line":81,"character":12}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1733, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":80},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1734,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 1734, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1735,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":81,"character":4},"end":{"line":81,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 1735, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1736,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 1736, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1737,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":82,"character":29}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 1737, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1738,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":82,"character":39}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 1738, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1739,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":82,"character":38}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 1739, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1740,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":82,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 1740, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1741,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":82,"character":39},"end":{"line":82,"character":39}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1741, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":81},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, ps) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1742,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1742, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1743,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":82,"character":40},"end":{"line":82,"character":40}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1743, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":82},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pms) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1744,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1744, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1745,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":82,"character":41},"end":{"line":82,"character":41}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1745, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1746,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1746, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":84},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1747,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1747, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1748,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":82,"character":43},"end":{"line":82,"character":43}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1748, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1749,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 1749, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1750,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":86,"character":38}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 1750, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1751,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":81,"character":28}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Sending response {"id": 1751, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1752,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":80,"character":38}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 1752, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1753,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":72,"character":48}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 1753, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1754,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":72,"character":48}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Sending response {"id": 1754, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1755,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":72,"character":31},"end":{"line":72,"character":66}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1755, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1756,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":82,"character":27}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 1756, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1757,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":82,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 1757, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1758,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":82,"character":14},"end":{"line":82,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0190734863281ms
Sending response {"id": 1758, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1759,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":40,"character":4},"end":{"line":40,"character":24}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1759, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1760,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":41,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.0219345092773ms
Sending response {"id": 1760, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1761,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":40,"character":28}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 1761, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1762,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":40,"character":28}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 1762, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1763,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":40,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 1763, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1764,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":40,"character":29},"end":{"line":40,"character":29}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Sending response {"id": 1764, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1765,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":47,"character":26}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 1765, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":85},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, ps : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1766,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1766, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1767,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":40,"character":30},"end":{"line":40,"character":30}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1767, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":86},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pms : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1768,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1768, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1769,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":40,"character":31},"end":{"line":40,"character":31}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 1769, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1770,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0340938568115ms
Sending response {"id": 1770, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":87},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm,s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":88},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1771,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1771, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1772,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":40,"character":33},"end":{"line":40,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1772, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1773,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1773, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1774,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":41,"character":35}}}
[server] Got a method textDocument/hover
[server] processing took 0.018835067749ms
Sending response {"id": 1774, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1775,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":40,"character":35}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 1775, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1776,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":40,"character":35},"end":{"line":40,"character":35}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1776, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":89},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s: transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1777,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1777, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1778,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":40,"character":34},"end":{"line":40,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1778, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":90},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n: transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1779,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1779, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1780,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":41,"character":0},"end":{"line":41,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1780, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1781,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1781, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":92},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1782,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0150203704834ms
Sending response {"id": 1782, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1783,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":41,"character":4},"end":{"line":41,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1783, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1784,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0300407409668ms
Sending response {"id": 1784, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1785,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":41,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Sending response {"id": 1785, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1786,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":41,"character":33}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 1786, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1787,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":41,"character":34}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00977516174316ms
Sending response {"id": 1787, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1788,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":41,"character":34},"end":{"line":41,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1788, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":93},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelsonstorage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1789,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1789, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":94},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1790,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 1790, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1791,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":41,"character":70},"end":{"line":41,"character":70}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 1791, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1792,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1792, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":95},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson *storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1793,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1793, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1794,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":41,"character":71},"end":{"line":41,"character":71}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1794, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1795,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0190734863281ms
Sending response {"id": 1795, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":96},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1796,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1796, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1797,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":41,"character":72},"end":{"line":41,"character":72}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1797, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1798,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.018835067749ms
Sending response {"id": 1798, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1799,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":47,"character":27}}}
[server] Got a method textDocument/hover
[server] processing took 0.0181198120117ms
Sending response {"id": 1799, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1800,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":42,"character":32}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 1800, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1801,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":42,"character":32}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 1801, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1802,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":42,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 1802, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1803,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":42,"character":32},"end":{"line":42,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0309944152832ms
Sending response {"id": 1803, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1804,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":49,"character":28}}}
[server] Got a method textDocument/hover
[server] processing took 0.0197887420654ms
Sending response {"id": 1804, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":97},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, ps.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1805,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1805, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1806,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":42,"character":33},"end":{"line":42,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1806, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":98},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pms.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":100},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1807,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1807, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1808,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":42,"character":36},"end":{"line":42,"character":36}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 1808, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1809,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 1809, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1810,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0150203704834ms
Sending response {"id": 1810, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":100},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":100}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1811,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":42,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 1811, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1812,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":41,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 1812, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1813,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":42,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 1813, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1814,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":42,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 1814, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1815,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":17,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Sending response {"id": 1815, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1816,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":17,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 1816, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1817,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":17,"character":34}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 1817, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1818,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":17,"character":34},"end":{"line":17,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1818, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1819,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":26,"character":22}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Sending response {"id": 1819, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":101},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pwl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1820,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 1820, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1821,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":17,"character":35},"end":{"line":17,"character":35}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 1821, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":102},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pmwl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1822,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1822, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":103},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm,wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":104},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1823,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 1823, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1824,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":17,"character":38},"end":{"line":17,"character":38}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 1824, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1825,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 1825, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1826,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":20,"character":38}}}
[server] Got a method textDocument/hover
[server] processing took 0.0240802764893ms
Sending response {"id": 1826, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1827,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":17,"character":42}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 1827, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1828,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":17,"character":41}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 1828, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1829,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":17,"character":41},"end":{"line":17,"character":41}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1829, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1830,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":25,"character":36}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 1830, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":105},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl: transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1831,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1831, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1832,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":17,"character":40},"end":{"line":17,"character":40}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Sending response {"id": 1832, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":106},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n: transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1833,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1833, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1834,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1834, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1835,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1835, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":108},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1836,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 1836, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1837,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":18,"character":4},"end":{"line":18,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 1837, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1838,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 1838, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1839,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":18,"character":38}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 1839, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1840,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":18,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 1840, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1841,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":18,"character":34},"end":{"line":18,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1841, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":109},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson(address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1842,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1842, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1843,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":18,"character":69},"end":{"line":18,"character":69}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 1843, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1844,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0190734863281ms
Sending response {"id": 1844, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":110},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1845,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1845, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1846,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":18,"character":70},"end":{"line":18,"character":70}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1846, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1847,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0190734863281ms
Sending response {"id": 1847, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":111},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson *(address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1848,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1848, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1849,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":18,"character":71},"end":{"line":18,"character":71}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1849, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1850,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0209808349609ms
Sending response {"id": 1850, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":112},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1851,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1851, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1852,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":18,"character":72},"end":{"line":18,"character":72}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1852, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1853,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1853, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1854,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0190734863281ms
Sending response {"id": 1854, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":112},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  let pm = transfer_descriptor_param_to_michelson p in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":112}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1855,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":26,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 1855, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1856,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":26,"character":25}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 1856, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1857,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":26,"character":25},"end":{"line":26,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 1857, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1858,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":26,"character":31}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 1858, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1859,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":23,"character":28}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 1859, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1860,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":23,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 1860, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1861,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":23,"character":28},"end":{"line":23,"character":28}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1861, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1862,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":23,"character":28}}}
[server] Got a method textDocument/definition
[server] processing took 0.0100135803223ms
Sending response {"id": 1862, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1863,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":23,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 1863, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1864,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":54}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 1864, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":113},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1865,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 1865, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1866,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1866, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":114},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1867,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 1867, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1868,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":22,"character":66},"end":{"line":22,"character":66}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 1868, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1869,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0209808349609ms
Sending response {"id": 1869, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":115},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contract h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1870,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1870, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1871,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":22,"character":66},"end":{"line":22,"character":66}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1871, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1872,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1872, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1873,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":28,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 1873, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1874,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":26,"character":21}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 1874, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1875,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":26,"character":21}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Sending response {"id": 1875, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1876,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":26,"character":21},"end":{"line":26,"character":21}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1876, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1877,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":39,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Sending response {"id": 1877, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":116},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_contrac h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":119},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_cont h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1878,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1878, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1879,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":26,"character":17},"end":{"line":26,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0190734863281ms
Sending response {"id": 1879, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":120},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_con h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":122},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_c h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1880,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1880, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1881,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":26,"character":14},"end":{"line":26,"character":14}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1881, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1882,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0190734863281ms
Sending response {"id": 1882, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":123},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_ h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1883,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0169277191162ms
Sending response {"id": 1883, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1884,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":26,"character":13},"end":{"line":26,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1884, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1885,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1885, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":124},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_e h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1886,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":26,"character":14},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0190734863281ms
Sending response {"id": 1886, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":128},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_entry h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1887,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 1887, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1888,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":26,"character":18},"end":{"line":26,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1888, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1889,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1889, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":132},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_entry_poo h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1890,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0138282775879ms
Sending response {"id": 1890, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1891,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":26,"character":22},"end":{"line":26,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Sending response {"id": 1891, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1892,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1892, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":133},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_entry_po h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1893,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0138282775879ms
Sending response {"id": 1893, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1894,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":26,"character":21},"end":{"line":26,"character":21}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1894, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1895,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 1895, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":134},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_entry_poi h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1896,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":26,"character":22},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 1896, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":136},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_entry_point h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1897,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 1897, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1898,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 1898, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1899,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":26,"character":24},"end":{"line":26,"character":24}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1899, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1900,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.014066696167ms
Sending response {"id": 1900, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":136},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_entry_point h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":136}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":138},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_entry_point h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n    \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1901,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 1901, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1902,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0138282775879ms
Sending response {"id": 1902, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":139},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_entry_point h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n  \n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1903,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 1903, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1904,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1904, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":140},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_entry_point h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1905,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1905, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1906,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 1906, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":141},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_entry_point h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1907,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1907, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1908,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":27,"character":81},"end":{"line":27,"character":81}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1908, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1909,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 1909, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1910,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0190734863281ms
Sending response {"id": 1910, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":141},"contentChanges":[{"text":"(**\nImplementation of the permission transfer hook, with custom behavior.\nIt uses a combination of a receiver while list and `fa2_token_receiver` interface.\nTransfer is permitted if a receiver address is in the receiver white list OR implements\n`fa2_token_receiver` interface. If a receiver address implements `fa2_token_receiver`\ninterface, its `tokens_received` entry point must be called.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  receiver_whitelist : address set;\n} \n\nlet custom_validate_receivers (p, pm, wl\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * (address set))\n    : operation list =\n  let get_receiver : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_) tx.txs in\n  let receivers = get_owners_from_batch (p.batch, get_receiver) in\n  Set.fold \n    (fun (ops, r : (operation list) * address) ->\n      match to_sender_hook r with\n      | Hook_entry_point h ->\n        (* receiver contract implements fa2_token_receiver interface: invoke it*)\n        let op = Operation.transaction pm 0mutez h in\n        op :: ops\n      | Hook_undefined err ->\n        (* receiver contract does not implement fa2_token_receiver interface: check whitelist*)\n        if Set.mem r wl\n        then ops\n        else (failwith err : operation list)\n    )\n    receivers ([] : operation list)\n\nlet custom_transfer_hook (p, pm, s\n    : transfer_descriptor_param * transfer_descriptor_param_michelson * storage) : operation list =\n  custom_validate_receivers (p, pm, s.receiver_whitelist)\n\n\nlet get_policy_descriptor (u : unit) : permissions_descriptor =\n  {\n    operator = Owner_or_operator_transfer;\n    sender = Owner_no_hook;\n    receiver = Owner_no_hook ; (* overridden by the custom policy *)\n    custom = Some { \n      tag = \"receiver_hook_and_whitelist\"; \n      config_api = (Some Current.self_address);\n    };\n  }\n\ntype config_whitelist = \n  | Add_receiver_to_whitelist of address set\n  | Remove_receiver_from_whitelist of address set\n\nlet configure_receiver_whitelist (cfg, wl : config_whitelist * (address set))\n    : address set =\n  match cfg with\n  | Add_receiver_to_whitelist rs ->\n    Set.fold \n      (fun (l, a : (address set) * address) -> Set.add a l)\n      rs wl\n  | Remove_receiver_from_whitelist rs ->\n     Set.fold \n      (fun (l, a : (address set) * address) -> Set.remove a l)\n      rs wl\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_receiver_whitelist of config_whitelist\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let p = transfer_descriptor_param_from_michelson pm in\n    let ops = custom_transfer_hook (p, pm, s) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = get_policy_descriptor unit in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_receiver_whitelist cfg ->\n    let new_wl = configure_receiver_whitelist (cfg, s.receiver_whitelist) in\n    let new_s = { s with receiver_whitelist = new_wl; } in\n    ([] : operation list), new_s\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo","version":141}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1911,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":30,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 1911, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1912,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_transfer_hook_lib.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 1912, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1913,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_transfer_hook_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 1913, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1914,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_transfer_hook_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 1914, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1915,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_transfer_hook_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 1915, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1916,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_transfer_hook_lib.mligo"},"range":{"start":{"line":6,"character":3},"end":{"line":6,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 1916, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","languageId":"ocaml","version":1,"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let ops = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.policy.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}}}
Read message 
{"jsonrpc":"2.0","id":1917,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 1917, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1918,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 1918, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1919,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 1919, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1920,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 1920, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1921,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":111,"character":45},"end":{"line":111,"character":45}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 1921, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1922,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"position":{"line":113,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 1922, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1923,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":113,"character":8},"end":{"line":113,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 1923, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":2},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let c = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.policy.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1924,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"position":{"line":113,"character":9},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Sending response {"id": 1924, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":3},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let ca = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.policy.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1925,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1925, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1926,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":113,"character":10},"end":{"line":113,"character":10}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 1926, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1927,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 1927, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":5},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let call = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.policy.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1928,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1928, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":7},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let callba = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.policy.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1929,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"position":{"line":113,"character":14},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Sending response {"id": 1929, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1930,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 1930, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":8},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let callbac = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.policy.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1931,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"position":{"line":113,"character":15},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Sending response {"id": 1931, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1932,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 1932, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1933,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":113,"character":15},"end":{"line":113,"character":15}},"context":{"diagnostics":[{"range":{"start":{"line":113,"character":8},"end":{"line":113,"character":15}},"message":"\"callbac\": Unknown word.","severity":3,"source":"cSpell"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1933, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1934,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 1934, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":11},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let call = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.policy.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1935,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.018835067749ms
Sending response {"id": 1935, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1936,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":113,"character":12},"end":{"line":113,"character":12}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1936, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1937,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 1937, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":13},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let ca = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.policy.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1938,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 1938, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1939,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":113,"character":10},"end":{"line":113,"character":10}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1939, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1940,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 1940, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":15},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let  = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.policy.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1941,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0147819519043ms
Sending response {"id": 1941, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1942,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 1942, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1943,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 1943, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1944,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 1944, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1945,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 1945, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1946,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"range":{"start":{"line":27,"character":81},"end":{"line":27,"character":81}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 1946, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1947,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"},"position":{"line":34,"character":25}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 1947, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_custom_receiver.mligo"}}}
Read message 
{"jsonrpc":"2.0","id":1948,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 1948, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1949,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 1949, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1950,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 1950, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1951,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"position":{"line":98,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 1951, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1952,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 1952, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1953,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 1953, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1954,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 1954, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1955,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":22,"character":4},"end":{"line":22,"character":58}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 1955, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1956,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":23,"character":22}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 1956, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1957,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 1957, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1958,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 1958, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1959,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 1959, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1960,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":24,"character":8},"end":{"line":24,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Sending response {"id": 1960, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":228},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let h = owners_transfer_hook (p, s.descriptor) in\n    let ops = List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mutez callback\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1961,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":9},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 1961, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1962,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1962, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1963,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":24,"character":9},"end":{"line":24,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1963, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":231},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let hook = owners_transfer_hook (p, s.descriptor) in\n    let ops = List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mutez callback\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1964,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0309944152832ms
Sending response {"id": 1964, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1965,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":24,"character":12},"end":{"line":24,"character":12}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1965, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1966,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 1966, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":232},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let hook_ = owners_transfer_hook (p, s.descriptor) in\n    let ops = List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mutez callback\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1967,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1967, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1968,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":24,"character":13},"end":{"line":24,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1968, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1969,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1969, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":234},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let hook_ca = owners_transfer_hook (p, s.descriptor) in\n    let ops = List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mutez callback\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":237},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let hook_calls = owners_transfer_hook (p, s.descriptor) in\n    let ops = List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mutez callback\n      ) callbacks\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1970,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 1970, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1971,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":24,"character":18},"end":{"line":24,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1971, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1972,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 1972, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1973,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":23,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 1973, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1974,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.0197887420654ms
Sending response {"id": 1974, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1975,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":24,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Sending response {"id": 1975, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1976,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":24,"character":8},"end":{"line":24,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 1976, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1977,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":27,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 1977, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1978,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":27,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 1978, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1979,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":8},"end":{"line":27,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 1979, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":238},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let hook_calls = owners_transfer_hook (p, s.descriptor) in\n    let ops = List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mutez callback\n      ) hook_calls\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1980,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 1980, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1981,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":18},"end":{"line":27,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 1981, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1982,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 1982, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1983,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0109672546387ms
Sending response {"id": 1983, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":238},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let hook_calls = owners_transfer_hook (p, s.descriptor) in\n    let ops = List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mutez callback\n      ) hook_calls\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":238}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1984,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 1984, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1985,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0112056732178ms
Sending response {"id": 1985, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1986,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 1986, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1987,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":123,"character":6},"end":{"line":123,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 1987, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1988,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":87,"character":0},"end":{"line":87,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 1988, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1989,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 1989, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1990,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 1990, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1991,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 1991, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1992,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"position":{"line":114,"character":33}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 1992, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":16},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let h = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.policy.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1993,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"position":{"line":113,"character":9},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Sending response {"id": 1993, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1994,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 1994, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1995,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":113,"character":9},"end":{"line":113,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 1995, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1996,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 1996, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":18},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let hoo = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.policy.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1997,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 1997, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":1998,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":113,"character":11},"end":{"line":113,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 1998, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1999,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 1999, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":19},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let hook = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.policy.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2000,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 2000, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":2001,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":113,"character":12},"end":{"line":113,"character":12}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 2001, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2002,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 2002, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":20},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let hook_ = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.policy.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2003,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 2003, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":2004,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":113,"character":13},"end":{"line":113,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0209808349609ms
Sending response {"id": 2004, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2005,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 2005, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":22},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let hook_ca = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.policy.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2006,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0200271606445ms
Sending response {"id": 2006, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":25},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let hook_calls = owners_transfer_hook\n      ({ligo_param = p; michelson_param = pm}, s.policy.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2007,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0200271606445ms
Sending response {"id": 2007, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":2008,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":113,"character":18},"end":{"line":113,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0209808349609ms
Sending response {"id": 2008, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2009,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 2009, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2010,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"position":{"line":114,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 2010, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2011,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"position":{"line":114,"character":29}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Sending response {"id": 2011, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2012,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"position":{"line":114,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Sending response {"id": 2012, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2013,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"position":{"line":114,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 2013, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2014,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"position":{"line":114,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 2014, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2015,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"position":{"line":114,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 2015, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2016,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"position":{"line":114,"character":21}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Sending response {"id": 2016, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2017,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":114,"character":7},"end":{"line":114,"character":21}},"context":{"diagnostics":[{"range":{"start":{"line":114,"character":8},"end":{"line":114,"character":12}},"message":"\"ligo\": Unknown word.","severity":3,"source":"cSpell"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 2017, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":26},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let hook_calls = owners_transfer_hook\n      (p; michelson_param = pm}, s.policy.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2018,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 2018, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":2019,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":114,"character":7},"end":{"line":114,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 2019, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2020,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 2020, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2021,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"position":{"line":114,"character":30}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 2021, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2022,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"position":{"line":114,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 2022, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2023,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":114,"character":30},"end":{"line":114,"character":30}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 2023, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2024,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":114,"character":31},"end":{"line":114,"character":31}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0219345092773ms
Sending response {"id": 2024, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":27},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let hook_calls = owners_transfer_hook\n      (p; michelson_param = pm, s.policy.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2025,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 2025, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":2026,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":114,"character":30},"end":{"line":114,"character":30}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 2026, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2027,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 2027, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":41},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let hook_calls = owners_transfer_hook\n      (p; michel, s.policy.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":42},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let hook_calls = owners_transfer_hook\n      (p; miche, s.policy.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":49},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let hook_calls = owners_transfer_hook\n      (p, s.policy.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2028,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 2028, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":2029,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":114,"character":8},"end":{"line":114,"character":8}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 2029, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2030,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 2030, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2031,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"position":{"line":114,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 2031, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2032,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":114,"character":6},"end":{"line":114,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 2032, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":51},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let hook_calls = owners_transfer_hook\n  (p, s.policy.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2033,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 2033, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":52},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let hook_calls = owners_transfer_hook\n(p, s.policy.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2034,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 2034, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":2035,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":114,"character":0},"end":{"line":114,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 2035, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2036,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 2036, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":53},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let hook_calls = owners_transfer_hook(p, s.policy.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2037,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 2037, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":2038,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":113,"character":41},"end":{"line":113,"character":41}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 2038, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2039,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 2039, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2040,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00691413879395ms
Sending response {"id": 2040, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":53},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let hook_calls = owners_transfer_hook(p, s.policy.descriptor) in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":53}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2041,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":113,"character":41},"end":{"line":113,"character":41}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00619888305664ms
Sending response {"id": 2041, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2042,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 2042, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2043,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 2043, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2044,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 2044, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":2045,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":27,"character":18},"end":{"line":27,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 2045, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2046,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":26,"character":30}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 2046, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2047,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":26,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Sending response {"id": 2047, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2048,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 2048, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2049,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 2049, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2050,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 2050, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2051,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":4},"end":{"line":25,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 2051, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2052,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":4},"end":{"line":28,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 2052, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2053,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 2053, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2054,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 2054, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2055,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 2055, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":2056,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":113,"character":41},"end":{"line":113,"character":41}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00619888305664ms
Sending response {"id": 2056, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2057,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"position":{"line":111,"character":33}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 2057, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2058,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"position":{"line":113,"character":68}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 2058, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2059,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":113,"character":68},"end":{"line":113,"character":68}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 2059, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":54},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let hook_calls = owners_transfer_hook(p, s.policy.descriptor) in\n    \n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2060,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 2060, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":2061,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 2061, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":55},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let hook_calls = owners_transfer_hook(p, s.policy.descriptor) in\n    let ops = List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mutez callback\n      ) hook_calls\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2062,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 2062, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":2063,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":117,"character":6},"end":{"line":117,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 2063, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2064,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 2064, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2065,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0131130218506ms
Sending response {"id": 2065, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":55},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let hook_calls = owners_transfer_hook(p, s.policy.descriptor) in\n    let ops = List.map (fun (callback : hook_entry_point) ->\n        Operation.transaction pm 0mutez callback\n      ) hook_calls\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":55}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2066,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":117,"character":6},"end":{"line":117,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 2066, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2067,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"position":{"line":115,"character":42}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 2067, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2068,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"position":{"line":114,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 2068, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2069,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"position":{"line":114,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 2069, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2070,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":114,"character":29},"end":{"line":114,"character":37}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 2070, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":57},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let hook_calls = owners_transfer_hook(p, s.policy.descriptor) in\n    let ops = List.map (fun (ca : hook_entry_point) ->\n        Operation.transaction pm 0mutez callback\n      ) hook_calls\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2071,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 2071, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":59},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let hook_calls = owners_transfer_hook(p, s.policy.descriptor) in\n    let ops = List.map (fun (call : hook_entry_point) ->\n        Operation.transaction pm 0mutez callback\n      ) hook_calls\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2072,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 2072, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":2073,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":114,"character":33},"end":{"line":114,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 2073, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2074,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0209808349609ms
Sending response {"id": 2074, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2075,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"position":{"line":115,"character":46}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Sending response {"id": 2075, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2076,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":115,"character":40},"end":{"line":115,"character":48}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 2076, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":60},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let hook_calls = owners_transfer_hook(p, s.policy.descriptor) in\n    let ops = List.map (fun (call : hook_entry_point) ->\n        Operation.transaction pm 0mutez c\n      ) hook_calls\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2077,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"position":{"line":115,"character":41},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Sending response {"id": 2077, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":61},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let hook_calls = owners_transfer_hook(p, s.policy.descriptor) in\n    let ops = List.map (fun (call : hook_entry_point) ->\n        Operation.transaction pm 0mutez ca\n      ) hook_calls\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":63},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let hook_calls = owners_transfer_hook(p, s.policy.descriptor) in\n    let ops = List.map (fun (call : hook_entry_point) ->\n        Operation.transaction pm 0mutez call\n      ) hook_calls\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2078,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.018835067749ms
Sending response {"id": 2078, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":2079,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":115,"character":44},"end":{"line":115,"character":44}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 2079, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2080,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 2080, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2081,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0169277191162ms
Sending response {"id": 2081, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":63},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n\nIt is possible to use additional custom policy \"schedule\" which let pause/unpause\ntransfers based on used schedule\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype schedule_interval = {\n  interval : int;\n  locked : bool;\n}\n\ntype schedule = {\n  start : timestamp;\n  schedule : schedule_interval list;\n  cyclic : bool;\n}\n\ntype schedule_policy = {\n  schedule : schedule;\n  schedule_interval : int;\n}\n\ntype permission_policy = {\n  descriptor : permissions_descriptor;\n  schedule_policy : schedule_policy option;\n}\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  policy : permission_policy;\n}\n\ntype schedule_config =\n  | Set_schedule of schedule\n  | View_schedule of (schedule option) contract\n\nlet configure_schedule (cfg, policy : schedule_config * schedule_policy option)\n    : (operation list) * (schedule_policy option) =\n  match cfg with\n  | Set_schedule s -> \n    let total_interval = List.fold \n      (fun (t, i : int * schedule_interval) -> t + i.interval)\n      s.schedule 0 in\n    let new_policy : schedule_policy = { schedule = s; schedule_interval = total_interval; } in\n    ([] : operation list), (Some new_policy)\n  | View_schedule v ->\n    let s = match policy with\n    | Some p -> Some p.schedule\n    | None -> (None : schedule option)\n    in\n    let op = Operation.transaction s 0mutez v in\n    [op], policy\n\nlet custom_policy_to_descriptor (p : permission_policy) : permissions_descriptor =\n  match p.schedule_policy with\n  | None -> p.descriptor\n  | Some s ->\n    let custom_p : custom_permission_policy = {\n      tag = \"schedule\";\n      config_api = Some Current.self_address;\n    }\n    in\n    {p.descriptor with custom = Some custom_p; }\n\ntype interval_result =\n  | Reminder of int\n  | Found of schedule_interval\n\nlet is_schedule_locked (policy : schedule_policy) : bool =\n  let elapsed : int = Current.time - policy.schedule.start in\n  if elapsed > policy.schedule_interval && not policy.schedule.cyclic\n  then true\n  else (* find schedule interval *)\n    let  e = (elapsed mod policy.schedule_interval) + 0 in\n    let interval = List.fold \n      (fun (acc, i : interval_result * schedule_interval) ->\n        match acc with\n        | Found si -> acc\n        | Reminder r ->\n          if r < i.interval then Found i\n          else Reminder (r - i.interval)\n      ) policy.schedule.schedule (Reminder e) in\n    match interval with\n    | Reminder r -> (failwith \"SCHEDULE_ERROR\" : bool)\n    | Found i -> i.locked\n\nlet validate_schedule (policy : schedule_policy option) : unit =\n  match policy with\n  | None -> unit\n  | Some p ->\n    let locked = is_schedule_locked p in\n    if locked\n    then failwith \"SCHEDULE_LOCKED\"\n    else unit\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n  | Config_schedule of schedule_config\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u1 = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let u2 = validate_schedule(s.policy.schedule_policy) in\n    let hook_calls = owners_transfer_hook(p, s.policy.descriptor) in\n    let ops = List.map (fun (call : hook_entry_point) ->\n        Operation.transaction pm 0mutez call\n      ) hook_calls\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let descriptor = custom_policy_to_descriptor s.policy in\n    let op , new_registry = register_with_fa2 (fa2, descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n  | Config_schedule cfg ->\n    let ops, new_schedule = configure_schedule (cfg, s.policy.schedule_policy) in\n    let new_s = { s with policy.schedule_policy = new_schedule; } in\n    ops, new_s\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo","version":63}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2082,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_hook_with_schedule.mligo"},"range":{"start":{"line":115,"character":44},"end":{"line":115,"character":44}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 2082, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2083,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 2083, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2084,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 2084, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2085,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 2085, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":2086,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":4},"end":{"line":28,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 2086, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2087,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":47}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 2087, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2088,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":25,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 2088, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2089,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":29},"end":{"line":25,"character":37}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 2089, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":240},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let hook_calls = owners_transfer_hook (p, s.descriptor) in\n    let ops = List.map (fun (ca : hook_entry_point) ->\n        Operation.transaction pm 0mutez callback\n      ) hook_calls\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2090,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0178813934326ms
Sending response {"id": 2090, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":2091,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":31},"end":{"line":25,"character":31}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 2091, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":242},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let hook_calls = owners_transfer_hook (p, s.descriptor) in\n    let ops = List.map (fun (call : hook_entry_point) ->\n        Operation.transaction pm 0mutez callback\n      ) hook_calls\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2092,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 2092, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":2093,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":25,"character":33},"end":{"line":25,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 2093, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2094,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 2094, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2095,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":26,"character":46}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0138282775879ms
Sending response {"id": 2095, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2096,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":26,"character":40},"end":{"line":26,"character":48}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 2096, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":243},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let hook_calls = owners_transfer_hook (p, s.descriptor) in\n    let ops = List.map (fun (call : hook_entry_point) ->\n        Operation.transaction pm 0mutez c\n      ) hook_calls\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2097,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"position":{"line":26,"character":41},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Sending response {"id": 2097, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":244},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let hook_calls = owners_transfer_hook (p, s.descriptor) in\n    let ops = List.map (fun (call : hook_entry_point) ->\n        Operation.transaction pm 0mutez ca\n      ) hook_calls\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2098,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 2098, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":2099,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":26,"character":42},"end":{"line":26,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 2099, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":246},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let hook_calls = owners_transfer_hook (p, s.descriptor) in\n    let ops = List.map (fun (call : hook_entry_point) ->\n        Operation.transaction pm 0mutez call\n      ) hook_calls\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2100,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 2100, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":2101,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"range":{"start":{"line":26,"character":44},"end":{"line":26,"character":44}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 2101, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2102,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 2102, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2103,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0138282775879ms
Sending response {"id": 2103, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":246},"contentChanges":[{"text":"(**\nImplementation of a generic permission transfer hook that supports sender/receiver\nhooks. Contract behavior is driven by the permissions descriptor value in the\ncontract storage and its particular settings for `sender` and `receiver` policies.\n*)\n\n#include \"../lib/fa2_transfer_hook_lib.mligo\"\n#include \"../lib/fa2_owner_hooks_lib.mligo\"\n\ntype storage = {\n  fa2_registry : fa2_registry;\n  descriptor : permissions_descriptor;\n}\n\ntype  entry_points =\n  | Tokens_transferred_hook of transfer_descriptor_param_michelson\n  | Register_with_fa2 of fa2_with_hook_entry_points contract\n\n let main (param, s : entry_points * storage) \n    : (operation list) * storage =\n  match param with\n  | Tokens_transferred_hook pm ->\n    let p = transfer_descriptor_param_from_michelson pm in\n    let u = validate_hook_call (Tezos.sender, s.fa2_registry) in\n    let hook_calls = owners_transfer_hook (p, s.descriptor) in\n    let ops = List.map (fun (call : hook_entry_point) ->\n        Operation.transaction pm 0mutez call\n      ) hook_calls\n    in\n    ops, s\n\n  | Register_with_fa2 fa2 ->\n    let op , new_registry = register_with_fa2 (fa2, s.descriptor, s.fa2_registry) in\n    let new_s = { s with fa2_registry = new_registry; } in\n    [op], new_s\n\n\n\n(** example policies *)\n\n(* the policy which allows only token owners to transfer their own tokens. *)\nlet own_policy : permissions_descriptor = {\n  operator = Owner_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n\n(* non-transferable token (neither token owner, nor operators can transfer tokens. *)\n  let own_policy : permissions_descriptor = {\n  operator = No_transfer;\n  sender = Owner_no_hook;\n  receiver = Owner_no_hook;\n  custom = (None : custom_permission_policy option);\n}\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/examples/fa2_default_hook.mligo","version":246}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"$/setTraceNotification","params":{"value":"off"}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":false}}}}
Read message 
{"jsonrpc":"2.0","id":2104,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0190734863281ms
Sending response {"id": 2104, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2105,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 2105, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2106,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 2106, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":2107,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":87,"character":0},"end":{"line":87,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 2107, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2108,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":86,"character":52}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 2108, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2109,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":86,"character":53}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 2109, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2110,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":86,"character":53},"end":{"line":86,"character":53}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 2110, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2111,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":86,"character":53}}}
[server] Got a method textDocument/definition
[server] processing took 0.0100135803223ms
Sending response {"id": 2111, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2112,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":132,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":24,"character":2},"end":{"line":24,"character":6}},"message":"\"ligo\": Unknown word.","severity":3,"source":"cSpell"},{"range":{"start":{"line":79,"character":18},"end":{"line":79,"character":28}},"message":"\"entrypoint\": Unknown word.","severity":3,"source":"cSpell"},{"range":{"start":{"line":101,"character":18},"end":{"line":101,"character":28}},"message":"\"entrypoint\": Unknown word.","severity":3,"source":"cSpell"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 2112, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2113,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":90,"character":25},"end":{"line":90,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0190734863281ms
Sending response {"id": 2113, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2114,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"position":{"line":129,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 2114, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2115,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":129,"character":35},"end":{"line":129,"character":35}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 2115, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":336},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold\n    (fun (l, ep : (hook_entry_point list) * hook_entry_point) -> ep :: l)\n    receiver_entries sender_entries\n\n    \n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2116,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 2116, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":2117,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 2117, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":337},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold\n    (fun (l, ep : (hook_entry_point list) * hook_entry_point) -> ep :: l)\n    receiver_entries sender_entries\n\n  \n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2118,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 2118, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":2119,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 2119, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":338},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold\n    (fun (l, ep : (hook_entry_point list) * hook_entry_point) -> ep :: l)\n    receiver_entries sender_entries\n\n\n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2120,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0200271606445ms
Sending response {"id": 2120, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":2121,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0121593475342ms
Sending response {"id": 2121, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":339},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold\n    (fun (l, ep : (hook_entry_point list) * hook_entry_point) -> ep :: l)\n    receiver_entries sender_entries\n\nlet transfers_to_descriptors (txs : transfer list) : transfer_descriptor list =\n  List.map \n    (fun (tx : transfer) ->\n      let txs = List.map \n        (fun (dst : transfer_destination) ->\n          {\n            to_ = Some dst.to_;\n            token_id = dst.token_id;\n            amount = dst.amount;\n          }\n        ) tx.txs in\n        {\n          from_ = Some tx.from_;\n          txs = txs;\n        }\n    ) txs \n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2122,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 2122, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":2123,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0197887420654ms
Sending response {"id": 2123, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2124,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0100135803223ms
Sending response {"id": 2124, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":339},"contentChanges":[{"text":"#if !FA2_BEHAVIORS\n#define FA2_BEHAVIORS\n\n(** \nGeneric implementation of the permission logic for sender and receiver hooks. \nActual behavior is driven by a `permissions_descriptor`.\nTo be used in FA2 and/or FA2 permission transfer hook contract implementation\nwhich supports sender/receiver hooks.\n*)\n\n#include \"../fa2_interface.mligo\"\n#include \"../fa2_errors.mligo\"\n\ntype get_owners = transfer_descriptor -> (address option) list\n\ntype hook_entry_point = transfer_descriptor_param_michelson contract\n\ntype hook_result =\n  | Hook_entry_point of hook_entry_point\n  | Hook_undefined of string\n\ntype to_hook = address -> hook_result\n\n(* type transfer_hook_params = {\n  ligo_param : transfer_descriptor_param;\n  michelson_param : transfer_descriptor_param_michelson;\n} *)\n\n(**\nExtracts a set of unique `from_` or `to_` addresses from the transfer batch.\n@param batch transfer batch\n@param get_owner selector of `from_` or `to_` addresses from each individual `transfer_descriptor`\n *)\nlet get_owners_from_batch (batch, get_owners : (transfer_descriptor list) * get_owners) : address set =\n  List.fold \n    (fun (acc, tx : (address set) * transfer_descriptor) ->\n      let owners = get_owners tx in\n      List.fold \n        (fun (acc, o: (address set) * (address option)) ->\n          match o with\n          | None -> acc\n          | Some a -> Set.add a acc\n        )\n        owners\n        acc\n    )\n    batch\n    (Set.empty : address set)\n\nlet validate_owner_hook (p, get_owners, to_hook, is_required :\n    transfer_descriptor_param * get_owners * to_hook * bool)\n    : hook_entry_point list =\n  let owners = get_owners_from_batch (p.batch, get_owners) in\n  Set.fold \n    (fun (eps, owner : (hook_entry_point list) * address) ->\n      match to_hook owner with\n      | Hook_entry_point h -> h :: eps\n      | Hook_undefined error ->\n        (* owner hook is not implemented by the target contract *)\n        if is_required\n        then (failwith error : hook_entry_point list) (* owner hook is required: fail *)\n        else eps (* owner hook is optional: skip it *)\n      )\n    owners ([] : hook_entry_point list)\n\nlet validate_owner(p, policy, get_owners, to_hook : \n    transfer_descriptor_param * owner_hook_policy * get_owners * to_hook)\n    : hook_entry_point list =\n  match policy with\n  | Owner_no_hook -> ([] : hook_entry_point list)\n  | Optional_owner_hook -> validate_owner_hook (p, get_owners, to_hook, false)\n  | Required_owner_hook -> validate_owner_hook (p, get_owners, to_hook, true)\n\n(**\nGiven an address of the token receiver, tries to get an entry point for\n`fa2_token_receiver` interface.\n *)\nlet to_receiver_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_received\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_receiver_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token receiver contracts that\nimplement `fa2_token_receiver` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_receivers (p, receiver_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_receivers : get_owners = fun (tx : transfer_descriptor) -> \n    List.map (fun (t : transfer_destination_descriptor) -> t.to_ )tx.txs in\n  validate_owner (p, receiver_policy, get_receivers, to_receiver_hook)\n\n(**\nGiven an address of the token sender, tries to get an entry point for\n`fa2_token_sender` interface.\n *)\nlet to_sender_hook : to_hook = fun (a : address) ->\n    let c : hook_entry_point option = \n    Operation.get_entrypoint_opt \"%tokens_sent\" a in\n    match c with\n    | Some c -> Hook_entry_point c\n    | None -> Hook_undefined fa2_sender_hook_undefined\n\n(**\nCreate a list iof Tezos operations invoking all token sender contracts that\nimplement `fa2_token_sender` interface. Fail if specified `owner_hook_policy`\ncannot be met.\n *)\nlet validate_senders (p, sender_policy : transfer_descriptor_param * owner_hook_policy)\n    : hook_entry_point list =\n  let get_sender : get_owners = fun (tx : transfer_descriptor) -> [tx.from_] in\n  validate_owner (p, sender_policy, get_sender, to_sender_hook)\n\n(**\nGenerate a list of Tezos operations invoking sender and receiver hooks according to\nthe policies defined by the permissions descriptor.\nTo be used in FA2 and/or FA2 transfer hook contract implementation which supports\nsender/receiver hooks.\n *)\nlet owners_transfer_hook (p, descriptor : transfer_descriptor_param * permissions_descriptor)\n    : hook_entry_point list =\n  let sender_entries = validate_senders (p, descriptor.sender) in\n  let receiver_entries = validate_receivers (p, descriptor.receiver) in\n  (* merge two lists *)\n  List.fold\n    (fun (l, ep : (hook_entry_point list) * hook_entry_point) -> ep :: l)\n    receiver_entries sender_entries\n\nlet transfers_to_descriptors (txs : transfer list) : transfer_descriptor list =\n  List.map \n    (fun (tx : transfer) ->\n      let txs = List.map \n        (fun (dst : transfer_destination) ->\n          {\n            to_ = Some dst.to_;\n            token_id = dst.token_id;\n            amount = dst.amount;\n          }\n        ) tx.txs in\n        {\n          from_ = Some tx.from_;\n          txs = txs;\n        }\n    ) txs \n\n#endif\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo","version":339}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2125,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/eugenemishura/opt/tzip/proposals/tzip-12/lib/fa2_owner_hooks_lib.mligo"},"range":{"start":{"line":0,"character":0},"end":{"line":149,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":24,"character":2},"end":{"line":24,"character":6}},"message":"\"ligo\": Unknown word.","severity":3,"source":"cSpell"},{"range":{"start":{"line":79,"character":18},"end":{"line":79,"character":28}},"message":"\"entrypoint\": Unknown word.","severity":3,"source":"cSpell"},{"range":{"start":{"line":101,"character":18},"end":{"line":101,"character":28}},"message":"\"entrypoint\": Unknown word.","severity":3,"source":"cSpell"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0219345092773ms
Sending response {"id": 2125, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
